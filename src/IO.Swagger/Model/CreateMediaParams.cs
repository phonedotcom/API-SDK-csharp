/* 
 * Phone.com API
 *
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CreateMediaParams
    /// </summary>
    [DataContract]
    public partial class CreateMediaParams :  IEquatable<CreateMediaParams>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateMediaParams" /> class.
        /// </summary>
        /// <param name="Name">Name of media.</param>
        /// <param name="Origin">&#39;tts&#39;, &#39;file&#39;.</param>
        /// <param name="Type">&#39;hold_music&#39;, &#39;greeting&#39;.</param>
        /// <param name="TtsVoice">&#39;allison&#39;, &#39;amy&#39;, &#39;belle&#39;, &#39;callie&#39;, &#39;callieq&#39;, &#39;dallas&#39;, &#39;damien&#39;, &#39;david&#39;, &#39;designerdave&#39;, &#39;diane&#39;, &#39;diesel&#39;, &#39;dog&#39;, &#39;duchess&#39;, &#39;duncan&#39;, &#39;emily&#39;, &#39;evilgenius&#39;, &#39;frank&#39;, &#39;french-fry&#39;, &#39;gregory&#39;, &#39;isabelle&#39;, &#39;jean-pierre&#39;, &#39;jerkface&#39;, &#39;katrin&#39;, &#39;kayla&#39;, &#39;kidaroo&#39;, &#39;lawrence&#39;, &#39;layo&#39;, &#39;linda&#39;, &#39;marta&#39;, &#39;matthias&#39;, &#39;miguel&#39;, &#39;millie&#39;, &#39;princess&#39;, &#39;ransomnote&#39;, &#39;robin&#39;, &#39;shouty&#39;, &#39;shygirl&#39;, &#39;tamika&#39;, &#39;tophat&#39;, &#39;vittoria&#39;, &#39;vixen&#39;, &#39;vlad&#39;, &#39;walter&#39;, &#39;whispery&#39;, &#39;william&#39;, &#39;wiseguy&#39;, &#39;zach&#39;.</param>
        /// <param name="TtsText">Text used for text-to-speech conversion, maximum 800 characters.</param>
        /// <param name="IsTemparary">&#39;Y&#39;, &#39;N&#39;. Media file is temporary, will be deleted after a specified period..</param>
        /// <param name="ExpirationDate">If is_temporary is &#39;Y&#39;, media will be deleted after the specified time in seconds.</param>
        /// <param name="Duration">Length of media in seconds.</param>
        /// <param name="Notes">Notes about the media object.</param>
        /// <param name="Randomized">&#39;Y&#39;, &#39;N&#39;. Start playing the media file in random location, instead of from the beginning.</param>
        public CreateMediaParams(string Name = default(string), string Origin = default(string), string Type = default(string), string TtsVoice = default(string), string TtsText = default(string), string IsTemparary = default(string), int? ExpirationDate = default(int?), int? Duration = default(int?), string Notes = default(string), string Randomized = default(string))
        {
            this.Name = Name;
            this.Origin = Origin;
            this.Type = Type;
            this.TtsVoice = TtsVoice;
            this.TtsText = TtsText;
            this.IsTemparary = IsTemparary;
            this.ExpirationDate = ExpirationDate;
            this.Duration = Duration;
            this.Notes = Notes;
            this.Randomized = Randomized;
        }
        
        /// <summary>
        /// Name of media
        /// </summary>
        /// <value>Name of media</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// &#39;tts&#39;, &#39;file&#39;
        /// </summary>
        /// <value>&#39;tts&#39;, &#39;file&#39;</value>
        [DataMember(Name="origin", EmitDefaultValue=false)]
        public string Origin { get; set; }
        /// <summary>
        /// &#39;hold_music&#39;, &#39;greeting&#39;
        /// </summary>
        /// <value>&#39;hold_music&#39;, &#39;greeting&#39;</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// &#39;allison&#39;, &#39;amy&#39;, &#39;belle&#39;, &#39;callie&#39;, &#39;callieq&#39;, &#39;dallas&#39;, &#39;damien&#39;, &#39;david&#39;, &#39;designerdave&#39;, &#39;diane&#39;, &#39;diesel&#39;, &#39;dog&#39;, &#39;duchess&#39;, &#39;duncan&#39;, &#39;emily&#39;, &#39;evilgenius&#39;, &#39;frank&#39;, &#39;french-fry&#39;, &#39;gregory&#39;, &#39;isabelle&#39;, &#39;jean-pierre&#39;, &#39;jerkface&#39;, &#39;katrin&#39;, &#39;kayla&#39;, &#39;kidaroo&#39;, &#39;lawrence&#39;, &#39;layo&#39;, &#39;linda&#39;, &#39;marta&#39;, &#39;matthias&#39;, &#39;miguel&#39;, &#39;millie&#39;, &#39;princess&#39;, &#39;ransomnote&#39;, &#39;robin&#39;, &#39;shouty&#39;, &#39;shygirl&#39;, &#39;tamika&#39;, &#39;tophat&#39;, &#39;vittoria&#39;, &#39;vixen&#39;, &#39;vlad&#39;, &#39;walter&#39;, &#39;whispery&#39;, &#39;william&#39;, &#39;wiseguy&#39;, &#39;zach&#39;
        /// </summary>
        /// <value>&#39;allison&#39;, &#39;amy&#39;, &#39;belle&#39;, &#39;callie&#39;, &#39;callieq&#39;, &#39;dallas&#39;, &#39;damien&#39;, &#39;david&#39;, &#39;designerdave&#39;, &#39;diane&#39;, &#39;diesel&#39;, &#39;dog&#39;, &#39;duchess&#39;, &#39;duncan&#39;, &#39;emily&#39;, &#39;evilgenius&#39;, &#39;frank&#39;, &#39;french-fry&#39;, &#39;gregory&#39;, &#39;isabelle&#39;, &#39;jean-pierre&#39;, &#39;jerkface&#39;, &#39;katrin&#39;, &#39;kayla&#39;, &#39;kidaroo&#39;, &#39;lawrence&#39;, &#39;layo&#39;, &#39;linda&#39;, &#39;marta&#39;, &#39;matthias&#39;, &#39;miguel&#39;, &#39;millie&#39;, &#39;princess&#39;, &#39;ransomnote&#39;, &#39;robin&#39;, &#39;shouty&#39;, &#39;shygirl&#39;, &#39;tamika&#39;, &#39;tophat&#39;, &#39;vittoria&#39;, &#39;vixen&#39;, &#39;vlad&#39;, &#39;walter&#39;, &#39;whispery&#39;, &#39;william&#39;, &#39;wiseguy&#39;, &#39;zach&#39;</value>
        [DataMember(Name="tts_voice", EmitDefaultValue=false)]
        public string TtsVoice { get; set; }
        /// <summary>
        /// Text used for text-to-speech conversion, maximum 800 characters
        /// </summary>
        /// <value>Text used for text-to-speech conversion, maximum 800 characters</value>
        [DataMember(Name="tts_text", EmitDefaultValue=false)]
        public string TtsText { get; set; }
        /// <summary>
        /// &#39;Y&#39;, &#39;N&#39;. Media file is temporary, will be deleted after a specified period.
        /// </summary>
        /// <value>&#39;Y&#39;, &#39;N&#39;. Media file is temporary, will be deleted after a specified period.</value>
        [DataMember(Name="is_temparary", EmitDefaultValue=false)]
        public string IsTemparary { get; set; }
        /// <summary>
        /// If is_temporary is &#39;Y&#39;, media will be deleted after the specified time in seconds
        /// </summary>
        /// <value>If is_temporary is &#39;Y&#39;, media will be deleted after the specified time in seconds</value>
        [DataMember(Name="expiration_date", EmitDefaultValue=false)]
        public int? ExpirationDate { get; set; }
        /// <summary>
        /// Length of media in seconds
        /// </summary>
        /// <value>Length of media in seconds</value>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public int? Duration { get; set; }
        /// <summary>
        /// Notes about the media object
        /// </summary>
        /// <value>Notes about the media object</value>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }
        /// <summary>
        /// &#39;Y&#39;, &#39;N&#39;. Start playing the media file in random location, instead of from the beginning
        /// </summary>
        /// <value>&#39;Y&#39;, &#39;N&#39;. Start playing the media file in random location, instead of from the beginning</value>
        [DataMember(Name="randomized", EmitDefaultValue=false)]
        public string Randomized { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateMediaParams {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Origin: ").Append(Origin).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  TtsVoice: ").Append(TtsVoice).Append("\n");
            sb.Append("  TtsText: ").Append(TtsText).Append("\n");
            sb.Append("  IsTemparary: ").Append(IsTemparary).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Randomized: ").Append(Randomized).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CreateMediaParams);
        }

        /// <summary>
        /// Returns true if CreateMediaParams instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateMediaParams to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateMediaParams other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Origin == other.Origin ||
                    this.Origin != null &&
                    this.Origin.Equals(other.Origin)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.TtsVoice == other.TtsVoice ||
                    this.TtsVoice != null &&
                    this.TtsVoice.Equals(other.TtsVoice)
                ) && 
                (
                    this.TtsText == other.TtsText ||
                    this.TtsText != null &&
                    this.TtsText.Equals(other.TtsText)
                ) && 
                (
                    this.IsTemparary == other.IsTemparary ||
                    this.IsTemparary != null &&
                    this.IsTemparary.Equals(other.IsTemparary)
                ) && 
                (
                    this.ExpirationDate == other.ExpirationDate ||
                    this.ExpirationDate != null &&
                    this.ExpirationDate.Equals(other.ExpirationDate)
                ) && 
                (
                    this.Duration == other.Duration ||
                    this.Duration != null &&
                    this.Duration.Equals(other.Duration)
                ) && 
                (
                    this.Notes == other.Notes ||
                    this.Notes != null &&
                    this.Notes.Equals(other.Notes)
                ) && 
                (
                    this.Randomized == other.Randomized ||
                    this.Randomized != null &&
                    this.Randomized.Equals(other.Randomized)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Origin != null)
                    hash = hash * 59 + this.Origin.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.TtsVoice != null)
                    hash = hash * 59 + this.TtsVoice.GetHashCode();
                if (this.TtsText != null)
                    hash = hash * 59 + this.TtsText.GetHashCode();
                if (this.IsTemparary != null)
                    hash = hash * 59 + this.IsTemparary.GetHashCode();
                if (this.ExpirationDate != null)
                    hash = hash * 59 + this.ExpirationDate.GetHashCode();
                if (this.Duration != null)
                    hash = hash * 59 + this.Duration.GetHashCode();
                if (this.Notes != null)
                    hash = hash * 59 + this.Notes.GetHashCode();
                if (this.Randomized != null)
                    hash = hash * 59 + this.Randomized.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
