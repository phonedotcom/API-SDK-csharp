/* 
 * Phone.com API
 *
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Device Membership Object, or NULL. Read-only. See below for details.
    /// </summary>
    [DataContract]
    public partial class DeviceMembership :  IEquatable<DeviceMembership>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceMembership" /> class.
        /// </summary>
        /// <param name="Line">Line number to which this extension is assigned. Integer..</param>
        /// <param name="Device">Device that this extension belongs to. Output is an Device Summary Object..</param>
        public DeviceMembership(int? Line = default(int?), DeviceSummary Device = default(DeviceSummary))
        {
            this.Line = Line;
            this.Device = Device;
        }
        
        /// <summary>
        /// Line number to which this extension is assigned. Integer.
        /// </summary>
        /// <value>Line number to which this extension is assigned. Integer.</value>
        [DataMember(Name="line", EmitDefaultValue=false)]
        public int? Line { get; set; }
        /// <summary>
        /// Device that this extension belongs to. Output is an Device Summary Object.
        /// </summary>
        /// <value>Device that this extension belongs to. Output is an Device Summary Object.</value>
        [DataMember(Name="device", EmitDefaultValue=false)]
        public DeviceSummary Device { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeviceMembership {\n");
            sb.Append("  Line: ").Append(Line).Append("\n");
            sb.Append("  Device: ").Append(Device).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DeviceMembership);
        }

        /// <summary>
        /// Returns true if DeviceMembership instances are equal
        /// </summary>
        /// <param name="other">Instance of DeviceMembership to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeviceMembership other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Line == other.Line ||
                    this.Line != null &&
                    this.Line.Equals(other.Line)
                ) && 
                (
                    this.Device == other.Device ||
                    this.Device != null &&
                    this.Device.Equals(other.Device)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Line != null)
                    hash = hash * 59 + this.Line.GetHashCode();
                if (this.Device != null)
                    hash = hash * 59 + this.Device.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
