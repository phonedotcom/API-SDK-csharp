/* 
 * Phone.com API
 *
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CreateSmsParams
    /// </summary>
    [DataContract]
    public partial class CreateSmsParams :  IEquatable<CreateSmsParams>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSmsParams" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateSmsParams() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSmsParams" /> class.
        /// </summary>
        /// <param name="From">Phone number of sender (required).</param>
        /// <param name="To">Outgoing destination numbers (required).</param>
        /// <param name="Text">Text body of the outgoing SMS message. Maximum 160 characters per message. (required).</param>
        /// <param name="ExtensionId">ID of Extension where the sms is saved.</param>
        public CreateSmsParams(string From = default(string), string To = default(string), string Text = default(string), int? ExtensionId = default(int?))
        {
            // to ensure "From" is required (not null)
            if (From == null)
            {
                throw new InvalidDataException("From is a required property for CreateSmsParams and cannot be null");
            }
            else
            {
                this.From = From;
            }
            // to ensure "To" is required (not null)
            if (To == null)
            {
                throw new InvalidDataException("To is a required property for CreateSmsParams and cannot be null");
            }
            else
            {
                this.To = To;
            }
            // to ensure "Text" is required (not null)
            if (Text == null)
            {
                throw new InvalidDataException("Text is a required property for CreateSmsParams and cannot be null");
            }
            else
            {
                this.Text = Text;
            }
            this.ExtensionId = ExtensionId;
        }
        
        /// <summary>
        /// Phone number of sender
        /// </summary>
        /// <value>Phone number of sender</value>
        [DataMember(Name="from", EmitDefaultValue=false)]
        public string From { get; set; }
        /// <summary>
        /// Outgoing destination numbers
        /// </summary>
        /// <value>Outgoing destination numbers</value>
        [DataMember(Name="to", EmitDefaultValue=false)]
        public string To { get; set; }
        /// <summary>
        /// Text body of the outgoing SMS message. Maximum 160 characters per message.
        /// </summary>
        /// <value>Text body of the outgoing SMS message. Maximum 160 characters per message.</value>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }
        /// <summary>
        /// ID of Extension where the sms is saved
        /// </summary>
        /// <value>ID of Extension where the sms is saved</value>
        [DataMember(Name="extension_id", EmitDefaultValue=false)]
        public int? ExtensionId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateSmsParams {\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  ExtensionId: ").Append(ExtensionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CreateSmsParams);
        }

        /// <summary>
        /// Returns true if CreateSmsParams instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateSmsParams to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateSmsParams other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.From == other.From ||
                    this.From != null &&
                    this.From.Equals(other.From)
                ) && 
                (
                    this.To == other.To ||
                    this.To != null &&
                    this.To.Equals(other.To)
                ) && 
                (
                    this.Text == other.Text ||
                    this.Text != null &&
                    this.Text.Equals(other.Text)
                ) && 
                (
                    this.ExtensionId == other.ExtensionId ||
                    this.ExtensionId != null &&
                    this.ExtensionId.Equals(other.ExtensionId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.From != null)
                    hash = hash * 59 + this.From.GetHashCode();
                if (this.To != null)
                    hash = hash * 59 + this.To.GetHashCode();
                if (this.Text != null)
                    hash = hash * 59 + this.Text.GetHashCode();
                if (this.ExtensionId != null)
                    hash = hash * 59 + this.ExtensionId.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
