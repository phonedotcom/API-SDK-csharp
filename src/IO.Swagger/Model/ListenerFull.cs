/* 
 * Phone.com API
 *
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The Listener Object is used to represent a listener. Here are the properties:
    /// </summary>
    [DataContract]
    public partial class ListenerFull :  IEquatable<ListenerFull>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListenerFull" /> class.
        /// </summary>
        /// <param name="Id">Integer ID. Read-only..</param>
        /// <param name="VoipId">VoipId.</param>
        /// <param name="Type">Type of listener: callback.</param>
        /// <param name="EventType">Type of event subscribed by the listener: call.new, call.update, call.complete, call.log, sms.in, sms.out.</param>
        /// <param name="Callbacks">Array of Callback Object.</param>
        /// <param name="UpdatedAt">UpdatedAt.</param>
        /// <param name="CreatedAt">CreatedAt.</param>
        public ListenerFull(int? Id = default(int?), int? VoipId = default(int?), string Type = default(string), string EventType = default(string), List<Object> Callbacks = default(List<Object>), int? UpdatedAt = default(int?), int? CreatedAt = default(int?))
        {
            this.Id = Id;
            this.VoipId = VoipId;
            this.Type = Type;
            this.EventType = EventType;
            this.Callbacks = Callbacks;
            this.UpdatedAt = UpdatedAt;
            this.CreatedAt = CreatedAt;
        }
        
        /// <summary>
        /// Integer ID. Read-only.
        /// </summary>
        /// <value>Integer ID. Read-only.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets VoipId
        /// </summary>
        [DataMember(Name="voip_id", EmitDefaultValue=false)]
        public int? VoipId { get; set; }

        /// <summary>
        /// Type of listener: callback
        /// </summary>
        /// <value>Type of listener: callback</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Type of event subscribed by the listener: call.new, call.update, call.complete, call.log, sms.in, sms.out
        /// </summary>
        /// <value>Type of event subscribed by the listener: call.new, call.update, call.complete, call.log, sms.in, sms.out</value>
        [DataMember(Name="event_type", EmitDefaultValue=false)]
        public string EventType { get; set; }

        /// <summary>
        /// Array of Callback Object
        /// </summary>
        /// <value>Array of Callback Object</value>
        [DataMember(Name="callbacks", EmitDefaultValue=false)]
        public List<Object> Callbacks { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public int? UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public int? CreatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ListenerFull {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  VoipId: ").Append(VoipId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("  Callbacks: ").Append(Callbacks).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ListenerFull);
        }

        /// <summary>
        /// Returns true if ListenerFull instances are equal
        /// </summary>
        /// <param name="other">Instance of ListenerFull to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListenerFull other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.VoipId == other.VoipId ||
                    this.VoipId != null &&
                    this.VoipId.Equals(other.VoipId)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.EventType == other.EventType ||
                    this.EventType != null &&
                    this.EventType.Equals(other.EventType)
                ) && 
                (
                    this.Callbacks == other.Callbacks ||
                    this.Callbacks != null &&
                    this.Callbacks.SequenceEqual(other.Callbacks)
                ) && 
                (
                    this.UpdatedAt == other.UpdatedAt ||
                    this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(other.UpdatedAt)
                ) && 
                (
                    this.CreatedAt == other.CreatedAt ||
                    this.CreatedAt != null &&
                    this.CreatedAt.Equals(other.CreatedAt)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.VoipId != null)
                    hash = hash * 59 + this.VoipId.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.EventType != null)
                    hash = hash * 59 + this.EventType.GetHashCode();
                if (this.Callbacks != null)
                    hash = hash * 59 + this.Callbacks.GetHashCode();
                if (this.UpdatedAt != null)
                    hash = hash * 59 + this.UpdatedAt.GetHashCode();
                if (this.CreatedAt != null)
                    hash = hash * 59 + this.CreatedAt.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
