/* 
 * Phone.com API
 *
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The ping response object.
    /// </summary>
    [DataContract]
    public partial class PingResponse :  IEquatable<PingResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PingResponse" /> class.
        /// </summary>
        /// <param name="Datetime">Datetime.</param>
        /// <param name="RemoteIp">RemoteIp.</param>
        /// <param name="Timestamp">Timestamp.</param>
        /// <param name="UserAgent">UserAgent.</param>
        public PingResponse(string Datetime = default(string), string RemoteIp = default(string), int? Timestamp = default(int?), string UserAgent = default(string))
        {
            this.Datetime = Datetime;
            this.RemoteIp = RemoteIp;
            this.Timestamp = Timestamp;
            this.UserAgent = UserAgent;
        }
        
        /// <summary>
        /// Gets or Sets Datetime
        /// </summary>
        [DataMember(Name="datetime", EmitDefaultValue=false)]
        public string Datetime { get; set; }
        /// <summary>
        /// Gets or Sets RemoteIp
        /// </summary>
        [DataMember(Name="remote_ip", EmitDefaultValue=false)]
        public string RemoteIp { get; set; }
        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public int? Timestamp { get; set; }
        /// <summary>
        /// Gets or Sets UserAgent
        /// </summary>
        [DataMember(Name="user_agent", EmitDefaultValue=false)]
        public string UserAgent { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PingResponse {\n");
            sb.Append("  Datetime: ").Append(Datetime).Append("\n");
            sb.Append("  RemoteIp: ").Append(RemoteIp).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  UserAgent: ").Append(UserAgent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PingResponse);
        }

        /// <summary>
        /// Returns true if PingResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of PingResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PingResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Datetime == other.Datetime ||
                    this.Datetime != null &&
                    this.Datetime.Equals(other.Datetime)
                ) && 
                (
                    this.RemoteIp == other.RemoteIp ||
                    this.RemoteIp != null &&
                    this.RemoteIp.Equals(other.RemoteIp)
                ) && 
                (
                    this.Timestamp == other.Timestamp ||
                    this.Timestamp != null &&
                    this.Timestamp.Equals(other.Timestamp)
                ) && 
                (
                    this.UserAgent == other.UserAgent ||
                    this.UserAgent != null &&
                    this.UserAgent.Equals(other.UserAgent)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Datetime != null)
                    hash = hash * 59 + this.Datetime.GetHashCode();
                if (this.RemoteIp != null)
                    hash = hash * 59 + this.RemoteIp.GetHashCode();
                if (this.Timestamp != null)
                    hash = hash * 59 + this.Timestamp.GetHashCode();
                if (this.UserAgent != null)
                    hash = hash * 59 + this.UserAgent.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
