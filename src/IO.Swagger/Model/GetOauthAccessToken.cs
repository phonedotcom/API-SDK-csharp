/* 
 * Phone.com API
 *
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// GetOauthAccessToken
    /// </summary>
    [DataContract]
    public partial class GetOauthAccessToken :  IEquatable<GetOauthAccessToken>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetOauthAccessToken" /> class.
        /// </summary>
        /// <param name="Scope">Scope.</param>
        /// <param name="ExpiresAt">ExpiresAt.</param>
        /// <param name="ScopeDetails">ScopeDetails.</param>
        public GetOauthAccessToken(string Scope = default(string), int? ExpiresAt = default(int?), List<ScopeDetails> ScopeDetails = default(List<ScopeDetails>))
        {
            this.Scope = Scope;
            this.ExpiresAt = ExpiresAt;
            this.ScopeDetails = ScopeDetails;
        }
        
        /// <summary>
        /// Gets or Sets Scope
        /// </summary>
        [DataMember(Name="scope", EmitDefaultValue=false)]
        public string Scope { get; set; }

        /// <summary>
        /// Gets or Sets ExpiresAt
        /// </summary>
        [DataMember(Name="expires_at", EmitDefaultValue=false)]
        public int? ExpiresAt { get; set; }

        /// <summary>
        /// Gets or Sets ScopeDetails
        /// </summary>
        [DataMember(Name="scope_details", EmitDefaultValue=false)]
        public List<ScopeDetails> ScopeDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetOauthAccessToken {\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  ScopeDetails: ").Append(ScopeDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as GetOauthAccessToken);
        }

        /// <summary>
        /// Returns true if GetOauthAccessToken instances are equal
        /// </summary>
        /// <param name="other">Instance of GetOauthAccessToken to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetOauthAccessToken other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Scope == other.Scope ||
                    this.Scope != null &&
                    this.Scope.Equals(other.Scope)
                ) && 
                (
                    this.ExpiresAt == other.ExpiresAt ||
                    this.ExpiresAt != null &&
                    this.ExpiresAt.Equals(other.ExpiresAt)
                ) && 
                (
                    this.ScopeDetails == other.ScopeDetails ||
                    this.ScopeDetails != null &&
                    this.ScopeDetails.SequenceEqual(other.ScopeDetails)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Scope != null)
                    hash = hash * 59 + this.Scope.GetHashCode();
                if (this.ExpiresAt != null)
                    hash = hash * 59 + this.ExpiresAt.GetHashCode();
                if (this.ScopeDetails != null)
                    hash = hash * 59 + this.ScopeDetails.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
