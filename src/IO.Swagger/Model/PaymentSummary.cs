/* 
 * Phone.com API
 *
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The Payment Method Summary Object is used to briefly represent a Credit Card. It consists of parameters in the table below:
    /// </summary>
    [DataContract]
    public partial class PaymentSummary :  IEquatable<PaymentSummary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentSummary" /> class.
        /// </summary>
        /// <param name="Id">Payment Method ID.</param>
        /// <param name="VoipId">API Account ID.</param>
        /// <param name="Status">&#39;primary&#39; &#x3D; primary card used for billing; &#39;onfile&#39; &#x3D; card on file; &#39;hidden&#39; &#x3D; deleted card;.</param>
        /// <param name="Nickname">Name of Card.</param>
        /// <param name="Type">&#39;cc&#39; for credit card.</param>
        /// <param name="CreatedAt">Time payment record is created.</param>
        public PaymentSummary(int? Id = default(int?), int? VoipId = default(int?), string Status = default(string), string Nickname = default(string), string Type = default(string), int? CreatedAt = default(int?))
        {
            this.Id = Id;
            this.VoipId = VoipId;
            this.Status = Status;
            this.Nickname = Nickname;
            this.Type = Type;
            this.CreatedAt = CreatedAt;
        }
        
        /// <summary>
        /// Payment Method ID
        /// </summary>
        /// <value>Payment Method ID</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// API Account ID
        /// </summary>
        /// <value>API Account ID</value>
        [DataMember(Name="voip_id", EmitDefaultValue=false)]
        public int? VoipId { get; set; }

        /// <summary>
        /// &#39;primary&#39; &#x3D; primary card used for billing; &#39;onfile&#39; &#x3D; card on file; &#39;hidden&#39; &#x3D; deleted card;
        /// </summary>
        /// <value>&#39;primary&#39; &#x3D; primary card used for billing; &#39;onfile&#39; &#x3D; card on file; &#39;hidden&#39; &#x3D; deleted card;</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Name of Card
        /// </summary>
        /// <value>Name of Card</value>
        [DataMember(Name="nickname", EmitDefaultValue=false)]
        public string Nickname { get; set; }

        /// <summary>
        /// &#39;cc&#39; for credit card
        /// </summary>
        /// <value>&#39;cc&#39; for credit card</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Time payment record is created
        /// </summary>
        /// <value>Time payment record is created</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public int? CreatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentSummary {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  VoipId: ").Append(VoipId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Nickname: ").Append(Nickname).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PaymentSummary);
        }

        /// <summary>
        /// Returns true if PaymentSummary instances are equal
        /// </summary>
        /// <param name="other">Instance of PaymentSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentSummary other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.VoipId == other.VoipId ||
                    this.VoipId != null &&
                    this.VoipId.Equals(other.VoipId)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.Nickname == other.Nickname ||
                    this.Nickname != null &&
                    this.Nickname.Equals(other.Nickname)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.CreatedAt == other.CreatedAt ||
                    this.CreatedAt != null &&
                    this.CreatedAt.Equals(other.CreatedAt)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.VoipId != null)
                    hash = hash * 59 + this.VoipId.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.Nickname != null)
                    hash = hash * 59 + this.Nickname.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.CreatedAt != null)
                    hash = hash * 59 + this.CreatedAt.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
