/* 
 * Phone.com API
 *
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ReplaceMenuParams
    /// </summary>
    [DataContract]
    public partial class ReplaceMenuParams :  IEquatable<ReplaceMenuParams>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReplaceMenuParams" /> class.
        /// </summary>
        /// <param name="Name">Name.</param>
        /// <param name="Greeting">Greeting.</param>
        /// <param name="InvalidKeypress">InvalidKeypress.</param>
        /// <param name="AllowExtensionDial">AllowExtensionDial.</param>
        /// <param name="KeypressWaitTime">KeypressWaitTime.</param>
        /// <param name="TimeoutHandler">TimeoutHandler.</param>
        /// <param name="Options">Options.</param>
        public ReplaceMenuParams(string Name = default(string), Object Greeting = default(Object), Object InvalidKeypress = default(Object), bool? AllowExtensionDial = default(bool?), int? KeypressWaitTime = default(int?), Object TimeoutHandler = default(Object), List<Object> Options = default(List<Object>))
        {
            this.Name = Name;
            this.Greeting = Greeting;
            this.InvalidKeypress = InvalidKeypress;
            this.AllowExtensionDial = AllowExtensionDial;
            this.KeypressWaitTime = KeypressWaitTime;
            this.TimeoutHandler = TimeoutHandler;
            this.Options = Options;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Greeting
        /// </summary>
        [DataMember(Name="greeting", EmitDefaultValue=false)]
        public Object Greeting { get; set; }
        /// <summary>
        /// Gets or Sets InvalidKeypress
        /// </summary>
        [DataMember(Name="invalid_keypress", EmitDefaultValue=false)]
        public Object InvalidKeypress { get; set; }
        /// <summary>
        /// Gets or Sets AllowExtensionDial
        /// </summary>
        [DataMember(Name="allow_extension_dial", EmitDefaultValue=false)]
        public bool? AllowExtensionDial { get; set; }
        /// <summary>
        /// Gets or Sets KeypressWaitTime
        /// </summary>
        [DataMember(Name="keypress_wait_time", EmitDefaultValue=false)]
        public int? KeypressWaitTime { get; set; }
        /// <summary>
        /// Gets or Sets TimeoutHandler
        /// </summary>
        [DataMember(Name="timeout_handler", EmitDefaultValue=false)]
        public Object TimeoutHandler { get; set; }
        /// <summary>
        /// Gets or Sets Options
        /// </summary>
        [DataMember(Name="options", EmitDefaultValue=false)]
        public List<Object> Options { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReplaceMenuParams {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Greeting: ").Append(Greeting).Append("\n");
            sb.Append("  InvalidKeypress: ").Append(InvalidKeypress).Append("\n");
            sb.Append("  AllowExtensionDial: ").Append(AllowExtensionDial).Append("\n");
            sb.Append("  KeypressWaitTime: ").Append(KeypressWaitTime).Append("\n");
            sb.Append("  TimeoutHandler: ").Append(TimeoutHandler).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ReplaceMenuParams);
        }

        /// <summary>
        /// Returns true if ReplaceMenuParams instances are equal
        /// </summary>
        /// <param name="other">Instance of ReplaceMenuParams to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReplaceMenuParams other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Greeting == other.Greeting ||
                    this.Greeting != null &&
                    this.Greeting.Equals(other.Greeting)
                ) && 
                (
                    this.InvalidKeypress == other.InvalidKeypress ||
                    this.InvalidKeypress != null &&
                    this.InvalidKeypress.Equals(other.InvalidKeypress)
                ) && 
                (
                    this.AllowExtensionDial == other.AllowExtensionDial ||
                    this.AllowExtensionDial != null &&
                    this.AllowExtensionDial.Equals(other.AllowExtensionDial)
                ) && 
                (
                    this.KeypressWaitTime == other.KeypressWaitTime ||
                    this.KeypressWaitTime != null &&
                    this.KeypressWaitTime.Equals(other.KeypressWaitTime)
                ) && 
                (
                    this.TimeoutHandler == other.TimeoutHandler ||
                    this.TimeoutHandler != null &&
                    this.TimeoutHandler.Equals(other.TimeoutHandler)
                ) && 
                (
                    this.Options == other.Options ||
                    this.Options != null &&
                    this.Options.SequenceEqual(other.Options)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Greeting != null)
                    hash = hash * 59 + this.Greeting.GetHashCode();
                if (this.InvalidKeypress != null)
                    hash = hash * 59 + this.InvalidKeypress.GetHashCode();
                if (this.AllowExtensionDial != null)
                    hash = hash * 59 + this.AllowExtensionDial.GetHashCode();
                if (this.KeypressWaitTime != null)
                    hash = hash * 59 + this.KeypressWaitTime.GetHashCode();
                if (this.TimeoutHandler != null)
                    hash = hash * 59 + this.TimeoutHandler.GetHashCode();
                if (this.Options != null)
                    hash = hash * 59 + this.Options.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
