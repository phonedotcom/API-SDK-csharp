/* 
 * Phone.com API
 *
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CreateExtensionParams
    /// </summary>
    [DataContract]
    public partial class CreateExtensionParams :  IEquatable<CreateExtensionParams>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateExtensionParams" /> class.
        /// </summary>
        /// <param name="Voicemail">Voicemail.</param>
        /// <param name="CallNotifications">CallNotifications.</param>
        /// <param name="CallerId">Caller ID.</param>
        /// <param name="UsageType">Extension type.</param>
        /// <param name="Extension">Extension number (auto-generated if empty).</param>
        /// <param name="IncludeInDirectory">Include in dial-by-name directory.</param>
        /// <param name="Name">Name (auto-generated if empty).</param>
        /// <param name="FullName">Contact name.</param>
        /// <param name="Timezone">Timezone.</param>
        /// <param name="NameGreeting">Recording lookup object.</param>
        /// <param name="LocalAreaCode">Local area code.</param>
        /// <param name="EnableOutboundCalls">Enable outgoing calls.</param>
        /// <param name="EnableCallWaiting">Enable Call Waiting.</param>
        public CreateExtensionParams(VoicemailInput Voicemail = default(VoicemailInput), CallNotifications CallNotifications = default(CallNotifications), string CallerId = default(string), string UsageType = default(string), int? Extension = default(int?), string IncludeInDirectory = default(string), string Name = default(string), string FullName = default(string), string Timezone = default(string), Object NameGreeting = default(Object), string LocalAreaCode = default(string), string EnableOutboundCalls = default(string), string EnableCallWaiting = default(string))
        {
            this.Voicemail = Voicemail;
            this.CallNotifications = CallNotifications;
            this.CallerId = CallerId;
            this.UsageType = UsageType;
            this.Extension = Extension;
            this.IncludeInDirectory = IncludeInDirectory;
            this.Name = Name;
            this.FullName = FullName;
            this.Timezone = Timezone;
            this.NameGreeting = NameGreeting;
            this.LocalAreaCode = LocalAreaCode;
            this.EnableOutboundCalls = EnableOutboundCalls;
            this.EnableCallWaiting = EnableCallWaiting;
        }
        
        /// <summary>
        /// Gets or Sets Voicemail
        /// </summary>
        [DataMember(Name="voicemail", EmitDefaultValue=false)]
        public VoicemailInput Voicemail { get; set; }

        /// <summary>
        /// Gets or Sets CallNotifications
        /// </summary>
        [DataMember(Name="call_notifications", EmitDefaultValue=false)]
        public CallNotifications CallNotifications { get; set; }

        /// <summary>
        /// Caller ID
        /// </summary>
        /// <value>Caller ID</value>
        [DataMember(Name="caller_id", EmitDefaultValue=false)]
        public string CallerId { get; set; }

        /// <summary>
        /// Extension type
        /// </summary>
        /// <value>Extension type</value>
        [DataMember(Name="usage_type", EmitDefaultValue=false)]
        public string UsageType { get; set; }

        /// <summary>
        /// Extension number (auto-generated if empty)
        /// </summary>
        /// <value>Extension number (auto-generated if empty)</value>
        [DataMember(Name="extension", EmitDefaultValue=false)]
        public int? Extension { get; set; }

        /// <summary>
        /// Include in dial-by-name directory
        /// </summary>
        /// <value>Include in dial-by-name directory</value>
        [DataMember(Name="include_in_directory", EmitDefaultValue=false)]
        public string IncludeInDirectory { get; set; }

        /// <summary>
        /// Name (auto-generated if empty)
        /// </summary>
        /// <value>Name (auto-generated if empty)</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Contact name
        /// </summary>
        /// <value>Contact name</value>
        [DataMember(Name="full_name", EmitDefaultValue=false)]
        public string FullName { get; set; }

        /// <summary>
        /// Timezone
        /// </summary>
        /// <value>Timezone</value>
        [DataMember(Name="timezone", EmitDefaultValue=false)]
        public string Timezone { get; set; }

        /// <summary>
        /// Recording lookup object
        /// </summary>
        /// <value>Recording lookup object</value>
        [DataMember(Name="name_greeting", EmitDefaultValue=false)]
        public Object NameGreeting { get; set; }

        /// <summary>
        /// Local area code
        /// </summary>
        /// <value>Local area code</value>
        [DataMember(Name="local_area_code", EmitDefaultValue=false)]
        public string LocalAreaCode { get; set; }

        /// <summary>
        /// Enable outgoing calls
        /// </summary>
        /// <value>Enable outgoing calls</value>
        [DataMember(Name="enable_outbound_calls", EmitDefaultValue=false)]
        public string EnableOutboundCalls { get; set; }

        /// <summary>
        /// Enable Call Waiting
        /// </summary>
        /// <value>Enable Call Waiting</value>
        [DataMember(Name="enable_call_waiting", EmitDefaultValue=false)]
        public string EnableCallWaiting { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateExtensionParams {\n");
            sb.Append("  Voicemail: ").Append(Voicemail).Append("\n");
            sb.Append("  CallNotifications: ").Append(CallNotifications).Append("\n");
            sb.Append("  CallerId: ").Append(CallerId).Append("\n");
            sb.Append("  UsageType: ").Append(UsageType).Append("\n");
            sb.Append("  Extension: ").Append(Extension).Append("\n");
            sb.Append("  IncludeInDirectory: ").Append(IncludeInDirectory).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("  NameGreeting: ").Append(NameGreeting).Append("\n");
            sb.Append("  LocalAreaCode: ").Append(LocalAreaCode).Append("\n");
            sb.Append("  EnableOutboundCalls: ").Append(EnableOutboundCalls).Append("\n");
            sb.Append("  EnableCallWaiting: ").Append(EnableCallWaiting).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CreateExtensionParams);
        }

        /// <summary>
        /// Returns true if CreateExtensionParams instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateExtensionParams to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateExtensionParams other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Voicemail == other.Voicemail ||
                    this.Voicemail != null &&
                    this.Voicemail.Equals(other.Voicemail)
                ) && 
                (
                    this.CallNotifications == other.CallNotifications ||
                    this.CallNotifications != null &&
                    this.CallNotifications.Equals(other.CallNotifications)
                ) && 
                (
                    this.CallerId == other.CallerId ||
                    this.CallerId != null &&
                    this.CallerId.Equals(other.CallerId)
                ) && 
                (
                    this.UsageType == other.UsageType ||
                    this.UsageType != null &&
                    this.UsageType.Equals(other.UsageType)
                ) && 
                (
                    this.Extension == other.Extension ||
                    this.Extension != null &&
                    this.Extension.Equals(other.Extension)
                ) && 
                (
                    this.IncludeInDirectory == other.IncludeInDirectory ||
                    this.IncludeInDirectory != null &&
                    this.IncludeInDirectory.Equals(other.IncludeInDirectory)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.FullName == other.FullName ||
                    this.FullName != null &&
                    this.FullName.Equals(other.FullName)
                ) && 
                (
                    this.Timezone == other.Timezone ||
                    this.Timezone != null &&
                    this.Timezone.Equals(other.Timezone)
                ) && 
                (
                    this.NameGreeting == other.NameGreeting ||
                    this.NameGreeting != null &&
                    this.NameGreeting.Equals(other.NameGreeting)
                ) && 
                (
                    this.LocalAreaCode == other.LocalAreaCode ||
                    this.LocalAreaCode != null &&
                    this.LocalAreaCode.Equals(other.LocalAreaCode)
                ) && 
                (
                    this.EnableOutboundCalls == other.EnableOutboundCalls ||
                    this.EnableOutboundCalls != null &&
                    this.EnableOutboundCalls.Equals(other.EnableOutboundCalls)
                ) && 
                (
                    this.EnableCallWaiting == other.EnableCallWaiting ||
                    this.EnableCallWaiting != null &&
                    this.EnableCallWaiting.Equals(other.EnableCallWaiting)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Voicemail != null)
                    hash = hash * 59 + this.Voicemail.GetHashCode();
                if (this.CallNotifications != null)
                    hash = hash * 59 + this.CallNotifications.GetHashCode();
                if (this.CallerId != null)
                    hash = hash * 59 + this.CallerId.GetHashCode();
                if (this.UsageType != null)
                    hash = hash * 59 + this.UsageType.GetHashCode();
                if (this.Extension != null)
                    hash = hash * 59 + this.Extension.GetHashCode();
                if (this.IncludeInDirectory != null)
                    hash = hash * 59 + this.IncludeInDirectory.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.FullName != null)
                    hash = hash * 59 + this.FullName.GetHashCode();
                if (this.Timezone != null)
                    hash = hash * 59 + this.Timezone.GetHashCode();
                if (this.NameGreeting != null)
                    hash = hash * 59 + this.NameGreeting.GetHashCode();
                if (this.LocalAreaCode != null)
                    hash = hash * 59 + this.LocalAreaCode.GetHashCode();
                if (this.EnableOutboundCalls != null)
                    hash = hash * 59 + this.EnableOutboundCalls.GetHashCode();
                if (this.EnableCallWaiting != null)
                    hash = hash * 59 + this.EnableCallWaiting.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
