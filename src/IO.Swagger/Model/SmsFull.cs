/* 
 * Phone.com API
 *
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The Full SMS Object includes all of the properties in the SMS Summary Object.
    /// </summary>
    [DataContract]
    public partial class SmsFull :  IEquatable<SmsFull>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SmsFull" /> class.
        /// </summary>
        /// <param name="Id">Unique SMS ID. Read-only..</param>
        /// <param name="From">Caller ID number to display on the incoming/outgoing SMS message. For an outgoing message, it must be a phone number associated with your Phone.com account..</param>
        /// <param name="To">An array of SMS recipients..</param>
        /// <param name="Direction">Direction of SMS. &#39;in&#39; for Incoming messages, &#39;out&#39; for Outgoing messages..</param>
        /// <param name="CreatedEpoch">Unix time stamp representing the UTC time that the object was created in the Phone.com API system..</param>
        /// <param name="CreatedAt">Date string representing the UTC time that the object was created in the Phone.com API system..</param>
        /// <param name="Text">Body of the SMS text.</param>
        /// <param name="IsNew">True when SMS is new; False when SMS has been read..</param>
        public SmsFull(string Id = default(string), string From = default(string), List<Recipient> To = default(List<Recipient>), string Direction = default(string), int? CreatedEpoch = default(int?), DateTime? CreatedAt = default(DateTime?), string Text = default(string), bool? IsNew = default(bool?))
        {
            this.Id = Id;
            this.From = From;
            this.To = To;
            this.Direction = Direction;
            this.CreatedEpoch = CreatedEpoch;
            this.CreatedAt = CreatedAt;
            this.Text = Text;
            this.IsNew = IsNew;
        }
        
        /// <summary>
        /// Unique SMS ID. Read-only.
        /// </summary>
        /// <value>Unique SMS ID. Read-only.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Caller ID number to display on the incoming/outgoing SMS message. For an outgoing message, it must be a phone number associated with your Phone.com account.
        /// </summary>
        /// <value>Caller ID number to display on the incoming/outgoing SMS message. For an outgoing message, it must be a phone number associated with your Phone.com account.</value>
        [DataMember(Name="from", EmitDefaultValue=false)]
        public string From { get; set; }

        /// <summary>
        /// An array of SMS recipients.
        /// </summary>
        /// <value>An array of SMS recipients.</value>
        [DataMember(Name="to", EmitDefaultValue=false)]
        public List<Recipient> To { get; set; }

        /// <summary>
        /// Direction of SMS. &#39;in&#39; for Incoming messages, &#39;out&#39; for Outgoing messages.
        /// </summary>
        /// <value>Direction of SMS. &#39;in&#39; for Incoming messages, &#39;out&#39; for Outgoing messages.</value>
        [DataMember(Name="direction", EmitDefaultValue=false)]
        public string Direction { get; set; }

        /// <summary>
        /// Unix time stamp representing the UTC time that the object was created in the Phone.com API system.
        /// </summary>
        /// <value>Unix time stamp representing the UTC time that the object was created in the Phone.com API system.</value>
        [DataMember(Name="created_epoch", EmitDefaultValue=false)]
        public int? CreatedEpoch { get; set; }

        /// <summary>
        /// Date string representing the UTC time that the object was created in the Phone.com API system.
        /// </summary>
        /// <value>Date string representing the UTC time that the object was created in the Phone.com API system.</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Body of the SMS text
        /// </summary>
        /// <value>Body of the SMS text</value>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// True when SMS is new; False when SMS has been read.
        /// </summary>
        /// <value>True when SMS is new; False when SMS has been read.</value>
        [DataMember(Name="is_new", EmitDefaultValue=false)]
        public bool? IsNew { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SmsFull {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  CreatedEpoch: ").Append(CreatedEpoch).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  IsNew: ").Append(IsNew).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SmsFull);
        }

        /// <summary>
        /// Returns true if SmsFull instances are equal
        /// </summary>
        /// <param name="other">Instance of SmsFull to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SmsFull other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.From == other.From ||
                    this.From != null &&
                    this.From.Equals(other.From)
                ) && 
                (
                    this.To == other.To ||
                    this.To != null &&
                    this.To.SequenceEqual(other.To)
                ) && 
                (
                    this.Direction == other.Direction ||
                    this.Direction != null &&
                    this.Direction.Equals(other.Direction)
                ) && 
                (
                    this.CreatedEpoch == other.CreatedEpoch ||
                    this.CreatedEpoch != null &&
                    this.CreatedEpoch.Equals(other.CreatedEpoch)
                ) && 
                (
                    this.CreatedAt == other.CreatedAt ||
                    this.CreatedAt != null &&
                    this.CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    this.Text == other.Text ||
                    this.Text != null &&
                    this.Text.Equals(other.Text)
                ) && 
                (
                    this.IsNew == other.IsNew ||
                    this.IsNew != null &&
                    this.IsNew.Equals(other.IsNew)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.From != null)
                    hash = hash * 59 + this.From.GetHashCode();
                if (this.To != null)
                    hash = hash * 59 + this.To.GetHashCode();
                if (this.Direction != null)
                    hash = hash * 59 + this.Direction.GetHashCode();
                if (this.CreatedEpoch != null)
                    hash = hash * 59 + this.CreatedEpoch.GetHashCode();
                if (this.CreatedAt != null)
                    hash = hash * 59 + this.CreatedAt.GetHashCode();
                if (this.Text != null)
                    hash = hash * 59 + this.Text.GetHashCode();
                if (this.IsNew != null)
                    hash = hash * 59 + this.IsNew.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
