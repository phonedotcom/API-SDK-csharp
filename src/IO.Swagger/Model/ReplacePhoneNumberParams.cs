/* 
 * Phone.com API
 *
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ReplacePhoneNumberParams
    /// </summary>
    [DataContract]
    public partial class ReplacePhoneNumberParams :  IEquatable<ReplacePhoneNumberParams>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReplacePhoneNumberParams" /> class.
        /// </summary>
        /// <param name="Route">Route lookup object.</param>
        /// <param name="Name">Phone Name.</param>
        /// <param name="BlockIncoming">Block incoming calls.</param>
        /// <param name="BlockAnonymous">Block anonymous calls.</param>
        /// <param name="CallerId">Caller ID object.</param>
        /// <param name="SmsForwarding">SMS Forwarding Object, or NULL.</param>
        /// <param name="PoolItem">Pool lookup object.</param>
        /// <param name="CallNotifications">Call Notifications object.</param>
        public ReplacePhoneNumberParams(Object Route = default(Object), string Name = default(string), bool? BlockIncoming = default(bool?), bool? BlockAnonymous = default(bool?), CallerIdPhoneNumber CallerId = default(CallerIdPhoneNumber), SmsForwardingParams SmsForwarding = default(SmsForwardingParams), Object PoolItem = default(Object), CallNotifications CallNotifications = default(CallNotifications))
        {
            this.Route = Route;
            this.Name = Name;
            this.BlockIncoming = BlockIncoming;
            this.BlockAnonymous = BlockAnonymous;
            this.CallerId = CallerId;
            this.SmsForwarding = SmsForwarding;
            this.PoolItem = PoolItem;
            this.CallNotifications = CallNotifications;
        }
        
        /// <summary>
        /// Route lookup object
        /// </summary>
        /// <value>Route lookup object</value>
        [DataMember(Name="route", EmitDefaultValue=false)]
        public Object Route { get; set; }
        /// <summary>
        /// Phone Name
        /// </summary>
        /// <value>Phone Name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Block incoming calls
        /// </summary>
        /// <value>Block incoming calls</value>
        [DataMember(Name="block_incoming", EmitDefaultValue=false)]
        public bool? BlockIncoming { get; set; }
        /// <summary>
        /// Block anonymous calls
        /// </summary>
        /// <value>Block anonymous calls</value>
        [DataMember(Name="block_anonymous", EmitDefaultValue=false)]
        public bool? BlockAnonymous { get; set; }
        /// <summary>
        /// Caller ID object
        /// </summary>
        /// <value>Caller ID object</value>
        [DataMember(Name="caller_id", EmitDefaultValue=false)]
        public CallerIdPhoneNumber CallerId { get; set; }
        /// <summary>
        /// SMS Forwarding Object, or NULL
        /// </summary>
        /// <value>SMS Forwarding Object, or NULL</value>
        [DataMember(Name="sms_forwarding", EmitDefaultValue=false)]
        public SmsForwardingParams SmsForwarding { get; set; }
        /// <summary>
        /// Pool lookup object
        /// </summary>
        /// <value>Pool lookup object</value>
        [DataMember(Name="pool_item", EmitDefaultValue=false)]
        public Object PoolItem { get; set; }
        /// <summary>
        /// Call Notifications object
        /// </summary>
        /// <value>Call Notifications object</value>
        [DataMember(Name="call_notifications", EmitDefaultValue=false)]
        public CallNotifications CallNotifications { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReplacePhoneNumberParams {\n");
            sb.Append("  Route: ").Append(Route).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  BlockIncoming: ").Append(BlockIncoming).Append("\n");
            sb.Append("  BlockAnonymous: ").Append(BlockAnonymous).Append("\n");
            sb.Append("  CallerId: ").Append(CallerId).Append("\n");
            sb.Append("  SmsForwarding: ").Append(SmsForwarding).Append("\n");
            sb.Append("  PoolItem: ").Append(PoolItem).Append("\n");
            sb.Append("  CallNotifications: ").Append(CallNotifications).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ReplacePhoneNumberParams);
        }

        /// <summary>
        /// Returns true if ReplacePhoneNumberParams instances are equal
        /// </summary>
        /// <param name="other">Instance of ReplacePhoneNumberParams to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReplacePhoneNumberParams other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Route == other.Route ||
                    this.Route != null &&
                    this.Route.Equals(other.Route)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.BlockIncoming == other.BlockIncoming ||
                    this.BlockIncoming != null &&
                    this.BlockIncoming.Equals(other.BlockIncoming)
                ) && 
                (
                    this.BlockAnonymous == other.BlockAnonymous ||
                    this.BlockAnonymous != null &&
                    this.BlockAnonymous.Equals(other.BlockAnonymous)
                ) && 
                (
                    this.CallerId == other.CallerId ||
                    this.CallerId != null &&
                    this.CallerId.Equals(other.CallerId)
                ) && 
                (
                    this.SmsForwarding == other.SmsForwarding ||
                    this.SmsForwarding != null &&
                    this.SmsForwarding.Equals(other.SmsForwarding)
                ) && 
                (
                    this.PoolItem == other.PoolItem ||
                    this.PoolItem != null &&
                    this.PoolItem.Equals(other.PoolItem)
                ) && 
                (
                    this.CallNotifications == other.CallNotifications ||
                    this.CallNotifications != null &&
                    this.CallNotifications.Equals(other.CallNotifications)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Route != null)
                    hash = hash * 59 + this.Route.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.BlockIncoming != null)
                    hash = hash * 59 + this.BlockIncoming.GetHashCode();
                if (this.BlockAnonymous != null)
                    hash = hash * 59 + this.BlockAnonymous.GetHashCode();
                if (this.CallerId != null)
                    hash = hash * 59 + this.CallerId.GetHashCode();
                if (this.SmsForwarding != null)
                    hash = hash * 59 + this.SmsForwarding.GetHashCode();
                if (this.PoolItem != null)
                    hash = hash * 59 + this.PoolItem.GetHashCode();
                if (this.CallNotifications != null)
                    hash = hash * 59 + this.CallNotifications.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
