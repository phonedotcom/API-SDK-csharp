/* 
 * Phone.com API
 *
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ContactSubaccount
    /// </summary>
    [DataContract]
    public partial class ContactSubaccount :  IEquatable<ContactSubaccount>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactSubaccount" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ContactSubaccount() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactSubaccount" /> class.
        /// </summary>
        /// <param name="Name">Contact name (required).</param>
        /// <param name="Address">Address.</param>
        /// <param name="PrimaryEmail">Primary email address. Required. (required).</param>
        /// <param name="AlternateEmail">Alternate email address.</param>
        /// <param name="Company">Company name.</param>
        /// <param name="Phone">Phone number. Required. (required).</param>
        /// <param name="Fax">Fax number.</param>
        public ContactSubaccount(string Name = default(string), Address Address = default(Address), string PrimaryEmail = default(string), string AlternateEmail = default(string), string Company = default(string), string Phone = default(string), string Fax = default(string))
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for ContactSubaccount and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "PrimaryEmail" is required (not null)
            if (PrimaryEmail == null)
            {
                throw new InvalidDataException("PrimaryEmail is a required property for ContactSubaccount and cannot be null");
            }
            else
            {
                this.PrimaryEmail = PrimaryEmail;
            }
            // to ensure "Phone" is required (not null)
            if (Phone == null)
            {
                throw new InvalidDataException("Phone is a required property for ContactSubaccount and cannot be null");
            }
            else
            {
                this.Phone = Phone;
            }
            this.Address = Address;
            this.AlternateEmail = AlternateEmail;
            this.Company = Company;
            this.Fax = Fax;
        }
        
        /// <summary>
        /// Contact name
        /// </summary>
        /// <value>Contact name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public Address Address { get; set; }
        /// <summary>
        /// Primary email address. Required.
        /// </summary>
        /// <value>Primary email address. Required.</value>
        [DataMember(Name="primary_email", EmitDefaultValue=false)]
        public string PrimaryEmail { get; set; }
        /// <summary>
        /// Alternate email address
        /// </summary>
        /// <value>Alternate email address</value>
        [DataMember(Name="alternate_email", EmitDefaultValue=false)]
        public string AlternateEmail { get; set; }
        /// <summary>
        /// Company name
        /// </summary>
        /// <value>Company name</value>
        [DataMember(Name="company", EmitDefaultValue=false)]
        public string Company { get; set; }
        /// <summary>
        /// Phone number. Required.
        /// </summary>
        /// <value>Phone number. Required.</value>
        [DataMember(Name="phone", EmitDefaultValue=false)]
        public string Phone { get; set; }
        /// <summary>
        /// Fax number
        /// </summary>
        /// <value>Fax number</value>
        [DataMember(Name="fax", EmitDefaultValue=false)]
        public string Fax { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContactSubaccount {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  PrimaryEmail: ").Append(PrimaryEmail).Append("\n");
            sb.Append("  AlternateEmail: ").Append(AlternateEmail).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Fax: ").Append(Fax).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ContactSubaccount);
        }

        /// <summary>
        /// Returns true if ContactSubaccount instances are equal
        /// </summary>
        /// <param name="other">Instance of ContactSubaccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContactSubaccount other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Address == other.Address ||
                    this.Address != null &&
                    this.Address.Equals(other.Address)
                ) && 
                (
                    this.PrimaryEmail == other.PrimaryEmail ||
                    this.PrimaryEmail != null &&
                    this.PrimaryEmail.Equals(other.PrimaryEmail)
                ) && 
                (
                    this.AlternateEmail == other.AlternateEmail ||
                    this.AlternateEmail != null &&
                    this.AlternateEmail.Equals(other.AlternateEmail)
                ) && 
                (
                    this.Company == other.Company ||
                    this.Company != null &&
                    this.Company.Equals(other.Company)
                ) && 
                (
                    this.Phone == other.Phone ||
                    this.Phone != null &&
                    this.Phone.Equals(other.Phone)
                ) && 
                (
                    this.Fax == other.Fax ||
                    this.Fax != null &&
                    this.Fax.Equals(other.Fax)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Address != null)
                    hash = hash * 59 + this.Address.GetHashCode();
                if (this.PrimaryEmail != null)
                    hash = hash * 59 + this.PrimaryEmail.GetHashCode();
                if (this.AlternateEmail != null)
                    hash = hash * 59 + this.AlternateEmail.GetHashCode();
                if (this.Company != null)
                    hash = hash * 59 + this.Company.GetHashCode();
                if (this.Phone != null)
                    hash = hash * 59 + this.Phone.GetHashCode();
                if (this.Fax != null)
                    hash = hash * 59 + this.Fax.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
