/* 
 * Phone.com API
 *
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CreatePaymentParams
    /// </summary>
    [DataContract]
    public partial class CreatePaymentParams :  IEquatable<CreatePaymentParams>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreatePaymentParams" /> class.
        /// </summary>
        /// <param name="Nickname">Name of payment method.</param>
        /// <param name="Status">primary, onfile or hidden.</param>
        /// <param name="Type">Credit Card Type.</param>
        /// <param name="CcToken">Credit Card Token. Token is obtained by entering credit card info via the Credit Card Entry Form.</param>
        public CreatePaymentParams(string Nickname = default(string), string Status = default(string), string Type = default(string), string CcToken = default(string))
        {
            this.Nickname = Nickname;
            this.Status = Status;
            this.Type = Type;
            this.CcToken = CcToken;
        }
        
        /// <summary>
        /// Name of payment method
        /// </summary>
        /// <value>Name of payment method</value>
        [DataMember(Name="nickname", EmitDefaultValue=false)]
        public string Nickname { get; set; }

        /// <summary>
        /// primary, onfile or hidden
        /// </summary>
        /// <value>primary, onfile or hidden</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Credit Card Type
        /// </summary>
        /// <value>Credit Card Type</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Credit Card Token. Token is obtained by entering credit card info via the Credit Card Entry Form
        /// </summary>
        /// <value>Credit Card Token. Token is obtained by entering credit card info via the Credit Card Entry Form</value>
        [DataMember(Name="cc_token", EmitDefaultValue=false)]
        public string CcToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreatePaymentParams {\n");
            sb.Append("  Nickname: ").Append(Nickname).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  CcToken: ").Append(CcToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CreatePaymentParams);
        }

        /// <summary>
        /// Returns true if CreatePaymentParams instances are equal
        /// </summary>
        /// <param name="other">Instance of CreatePaymentParams to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreatePaymentParams other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Nickname == other.Nickname ||
                    this.Nickname != null &&
                    this.Nickname.Equals(other.Nickname)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.CcToken == other.CcToken ||
                    this.CcToken != null &&
                    this.CcToken.Equals(other.CcToken)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Nickname != null)
                    hash = hash * 59 + this.Nickname.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.CcToken != null)
                    hash = hash * 59 + this.CcToken.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
