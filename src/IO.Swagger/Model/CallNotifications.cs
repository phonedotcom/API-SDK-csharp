/* 
 * Phone.com API
 *
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Call Notifications Object or NULL
    /// </summary>
    [DataContract]
    public partial class CallNotifications :  IEquatable<CallNotifications>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CallNotifications" /> class.
        /// </summary>
        /// <param name="Emails">Array of email addresses.</param>
        /// <param name="Sms">A phone number capable of receiving SMS messages.</param>
        public CallNotifications(List<string> Emails = default(List<string>), string Sms = default(string))
        {
            this.Emails = Emails;
            this.Sms = Sms;
        }
        
        /// <summary>
        /// Array of email addresses
        /// </summary>
        /// <value>Array of email addresses</value>
        [DataMember(Name="emails", EmitDefaultValue=false)]
        public List<string> Emails { get; set; }
        /// <summary>
        /// A phone number capable of receiving SMS messages
        /// </summary>
        /// <value>A phone number capable of receiving SMS messages</value>
        [DataMember(Name="sms", EmitDefaultValue=false)]
        public string Sms { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallNotifications {\n");
            sb.Append("  Emails: ").Append(Emails).Append("\n");
            sb.Append("  Sms: ").Append(Sms).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CallNotifications);
        }

        /// <summary>
        /// Returns true if CallNotifications instances are equal
        /// </summary>
        /// <param name="other">Instance of CallNotifications to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallNotifications other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Emails == other.Emails ||
                    this.Emails != null &&
                    this.Emails.SequenceEqual(other.Emails)
                ) && 
                (
                    this.Sms == other.Sms ||
                    this.Sms != null &&
                    this.Sms.Equals(other.Sms)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Emails != null)
                    hash = hash * 59 + this.Emails.GetHashCode();
                if (this.Sms != null)
                    hash = hash * 59 + this.Sms.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
