/* 
 * Phone.com API
 *
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The Full Pricing Object is identical to the Pricing Summary Object. The Pricing Summary Object is used to briefly represent a pricing plan. Here are the properties:
    /// </summary>
    [DataContract]
    public partial class PricingFull :  IEquatable<PricingFull>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PricingFull" /> class.
        /// </summary>
        /// <param name="Id">Integer ID of this object..</param>
        /// <param name="Pricing">Pricing Object.</param>
        /// <param name="VoipId">Phone.com API Account (VoIP) ID.</param>
        /// <param name="Reason">Reason this pricing plan is applied.</param>
        /// <param name="Who">Name of the person / process who added this pricing plan to the subaccount.</param>
        /// <param name="ExpireDate">Pricing plan expiration timestamp in unix format. If pricing plan never expires, this item will not be returned.</param>
        public PricingFull(int? Id = default(int?), PricingObject Pricing = default(PricingObject), int? VoipId = default(int?), string Reason = default(string), string Who = default(string), string ExpireDate = default(string))
        {
            this.Id = Id;
            this.Pricing = Pricing;
            this.VoipId = VoipId;
            this.Reason = Reason;
            this.Who = Who;
            this.ExpireDate = ExpireDate;
        }
        
        /// <summary>
        /// Integer ID of this object.
        /// </summary>
        /// <value>Integer ID of this object.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Pricing Object
        /// </summary>
        /// <value>Pricing Object</value>
        [DataMember(Name="pricing", EmitDefaultValue=false)]
        public PricingObject Pricing { get; set; }

        /// <summary>
        /// Phone.com API Account (VoIP) ID
        /// </summary>
        /// <value>Phone.com API Account (VoIP) ID</value>
        [DataMember(Name="voip_id", EmitDefaultValue=false)]
        public int? VoipId { get; set; }

        /// <summary>
        /// Reason this pricing plan is applied
        /// </summary>
        /// <value>Reason this pricing plan is applied</value>
        [DataMember(Name="reason", EmitDefaultValue=false)]
        public string Reason { get; set; }

        /// <summary>
        /// Name of the person / process who added this pricing plan to the subaccount
        /// </summary>
        /// <value>Name of the person / process who added this pricing plan to the subaccount</value>
        [DataMember(Name="who", EmitDefaultValue=false)]
        public string Who { get; set; }

        /// <summary>
        /// Pricing plan expiration timestamp in unix format. If pricing plan never expires, this item will not be returned
        /// </summary>
        /// <value>Pricing plan expiration timestamp in unix format. If pricing plan never expires, this item will not be returned</value>
        [DataMember(Name="expire_date", EmitDefaultValue=false)]
        public string ExpireDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PricingFull {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Pricing: ").Append(Pricing).Append("\n");
            sb.Append("  VoipId: ").Append(VoipId).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  Who: ").Append(Who).Append("\n");
            sb.Append("  ExpireDate: ").Append(ExpireDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PricingFull);
        }

        /// <summary>
        /// Returns true if PricingFull instances are equal
        /// </summary>
        /// <param name="other">Instance of PricingFull to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PricingFull other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Pricing == other.Pricing ||
                    this.Pricing != null &&
                    this.Pricing.Equals(other.Pricing)
                ) && 
                (
                    this.VoipId == other.VoipId ||
                    this.VoipId != null &&
                    this.VoipId.Equals(other.VoipId)
                ) && 
                (
                    this.Reason == other.Reason ||
                    this.Reason != null &&
                    this.Reason.Equals(other.Reason)
                ) && 
                (
                    this.Who == other.Who ||
                    this.Who != null &&
                    this.Who.Equals(other.Who)
                ) && 
                (
                    this.ExpireDate == other.ExpireDate ||
                    this.ExpireDate != null &&
                    this.ExpireDate.Equals(other.ExpireDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Pricing != null)
                    hash = hash * 59 + this.Pricing.GetHashCode();
                if (this.VoipId != null)
                    hash = hash * 59 + this.VoipId.GetHashCode();
                if (this.Reason != null)
                    hash = hash * 59 + this.Reason.GetHashCode();
                if (this.Who != null)
                    hash = hash * 59 + this.Who.GetHashCode();
                if (this.ExpireDate != null)
                    hash = hash * 59 + this.ExpireDate.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
