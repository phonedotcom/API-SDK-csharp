/* 
 * Phone.com API
 *
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CreateListenerParams
    /// </summary>
    [DataContract]
    public partial class CreateListenerParams :  IEquatable<CreateListenerParams>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateListenerParams" /> class.
        /// </summary>
        /// <param name="Type">Type of listener. Must be &#39;callback&#39;.</param>
        /// <param name="EventType">Type of event to subscribe. &#39;call.new&#39;, &#39;call.update&#39;, &#39;call.complete&#39;.</param>
        /// <param name="Callbacks">Array of Callback Objects..</param>
        public CreateListenerParams(string Type = default(string), string EventType = default(string), List<CallbackObject> Callbacks = default(List<CallbackObject>))
        {
            this.Type = Type;
            this.EventType = EventType;
            this.Callbacks = Callbacks;
        }
        
        /// <summary>
        /// Type of listener. Must be &#39;callback&#39;
        /// </summary>
        /// <value>Type of listener. Must be &#39;callback&#39;</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Type of event to subscribe. &#39;call.new&#39;, &#39;call.update&#39;, &#39;call.complete&#39;
        /// </summary>
        /// <value>Type of event to subscribe. &#39;call.new&#39;, &#39;call.update&#39;, &#39;call.complete&#39;</value>
        [DataMember(Name="event_type", EmitDefaultValue=false)]
        public string EventType { get; set; }

        /// <summary>
        /// Array of Callback Objects.
        /// </summary>
        /// <value>Array of Callback Objects.</value>
        [DataMember(Name="callbacks", EmitDefaultValue=false)]
        public List<CallbackObject> Callbacks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateListenerParams {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("  Callbacks: ").Append(Callbacks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CreateListenerParams);
        }

        /// <summary>
        /// Returns true if CreateListenerParams instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateListenerParams to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateListenerParams other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.EventType == other.EventType ||
                    this.EventType != null &&
                    this.EventType.Equals(other.EventType)
                ) && 
                (
                    this.Callbacks == other.Callbacks ||
                    this.Callbacks != null &&
                    this.Callbacks.SequenceEqual(other.Callbacks)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.EventType != null)
                    hash = hash * 59 + this.EventType.GetHashCode();
                if (this.Callbacks != null)
                    hash = hash * 59 + this.Callbacks.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
