/* 
 * Phone.com API
 *
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICalllogsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Show details of an individual Call Log entry
        /// </summary>
        /// <remarks>
        /// See Call Logs for more detail.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="callId">Call ID</param>
        /// <returns>CallLogFull</returns>
        CallLogFull GetAccountCallLogs (int? accountId, string callId);

        /// <summary>
        /// Show details of an individual Call Log entry
        /// </summary>
        /// <remarks>
        /// See Call Logs for more detail.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="callId">Call ID</param>
        /// <returns>ApiResponse of CallLogFull</returns>
        ApiResponse<CallLogFull> GetAccountCallLogsWithHttpInfo (int? accountId, string callId);
        /// <summary>
        /// Get a list of call details associated with your account
        /// </summary>
        /// <remarks>
        /// See Call Logs for more detail.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="filtersStartTime">Call start time filter (optional)</param>
        /// <param name="filtersCreatedAt">Call log creation time filter (optional)</param>
        /// <param name="filtersDirection">Call direction filter: in or out (optional)</param>
        /// <param name="filtersCalledNumber">Called number (optional)</param>
        /// <param name="filtersType">Call type, such as &#39;call&#39;, &#39;fax&#39;, &#39;audiogram&#39; (optional)</param>
        /// <param name="filtersExtension">Extension filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="sortStartTime">Sorting by call start time: asc or desc (optional)</param>
        /// <param name="sortCreatedAt">Sorting by call log creation time: asc or desc (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>ListCallLogs</returns>
        ListCallLogs ListAccountCallLogs (int? accountId, List<string> filtersId = null, List<string> filtersStartTime = null, string filtersCreatedAt = null, string filtersDirection = null, string filtersCalledNumber = null, string filtersType = null, List<string> filtersExtension = null, string sortId = null, string sortStartTime = null, string sortCreatedAt = null, int? limit = null, int? offset = null, string fields = null);

        /// <summary>
        /// Get a list of call details associated with your account
        /// </summary>
        /// <remarks>
        /// See Call Logs for more detail.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="filtersStartTime">Call start time filter (optional)</param>
        /// <param name="filtersCreatedAt">Call log creation time filter (optional)</param>
        /// <param name="filtersDirection">Call direction filter: in or out (optional)</param>
        /// <param name="filtersCalledNumber">Called number (optional)</param>
        /// <param name="filtersType">Call type, such as &#39;call&#39;, &#39;fax&#39;, &#39;audiogram&#39; (optional)</param>
        /// <param name="filtersExtension">Extension filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="sortStartTime">Sorting by call start time: asc or desc (optional)</param>
        /// <param name="sortCreatedAt">Sorting by call log creation time: asc or desc (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>ApiResponse of ListCallLogs</returns>
        ApiResponse<ListCallLogs> ListAccountCallLogsWithHttpInfo (int? accountId, List<string> filtersId = null, List<string> filtersStartTime = null, string filtersCreatedAt = null, string filtersDirection = null, string filtersCalledNumber = null, string filtersType = null, List<string> filtersExtension = null, string sortId = null, string sortStartTime = null, string sortCreatedAt = null, int? limit = null, int? offset = null, string fields = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Show details of an individual Call Log entry
        /// </summary>
        /// <remarks>
        /// See Call Logs for more detail.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="callId">Call ID</param>
        /// <returns>Task of CallLogFull</returns>
        System.Threading.Tasks.Task<CallLogFull> GetAccountCallLogsAsync (int? accountId, string callId);

        /// <summary>
        /// Show details of an individual Call Log entry
        /// </summary>
        /// <remarks>
        /// See Call Logs for more detail.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="callId">Call ID</param>
        /// <returns>Task of ApiResponse (CallLogFull)</returns>
        System.Threading.Tasks.Task<ApiResponse<CallLogFull>> GetAccountCallLogsAsyncWithHttpInfo (int? accountId, string callId);
        /// <summary>
        /// Get a list of call details associated with your account
        /// </summary>
        /// <remarks>
        /// See Call Logs for more detail.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="filtersStartTime">Call start time filter (optional)</param>
        /// <param name="filtersCreatedAt">Call log creation time filter (optional)</param>
        /// <param name="filtersDirection">Call direction filter: in or out (optional)</param>
        /// <param name="filtersCalledNumber">Called number (optional)</param>
        /// <param name="filtersType">Call type, such as &#39;call&#39;, &#39;fax&#39;, &#39;audiogram&#39; (optional)</param>
        /// <param name="filtersExtension">Extension filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="sortStartTime">Sorting by call start time: asc or desc (optional)</param>
        /// <param name="sortCreatedAt">Sorting by call log creation time: asc or desc (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>Task of ListCallLogs</returns>
        System.Threading.Tasks.Task<ListCallLogs> ListAccountCallLogsAsync (int? accountId, List<string> filtersId = null, List<string> filtersStartTime = null, string filtersCreatedAt = null, string filtersDirection = null, string filtersCalledNumber = null, string filtersType = null, List<string> filtersExtension = null, string sortId = null, string sortStartTime = null, string sortCreatedAt = null, int? limit = null, int? offset = null, string fields = null);

        /// <summary>
        /// Get a list of call details associated with your account
        /// </summary>
        /// <remarks>
        /// See Call Logs for more detail.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="filtersStartTime">Call start time filter (optional)</param>
        /// <param name="filtersCreatedAt">Call log creation time filter (optional)</param>
        /// <param name="filtersDirection">Call direction filter: in or out (optional)</param>
        /// <param name="filtersCalledNumber">Called number (optional)</param>
        /// <param name="filtersType">Call type, such as &#39;call&#39;, &#39;fax&#39;, &#39;audiogram&#39; (optional)</param>
        /// <param name="filtersExtension">Extension filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="sortStartTime">Sorting by call start time: asc or desc (optional)</param>
        /// <param name="sortCreatedAt">Sorting by call log creation time: asc or desc (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>Task of ApiResponse (ListCallLogs)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListCallLogs>> ListAccountCallLogsAsyncWithHttpInfo (int? accountId, List<string> filtersId = null, List<string> filtersStartTime = null, string filtersCreatedAt = null, string filtersDirection = null, string filtersCalledNumber = null, string filtersType = null, List<string> filtersExtension = null, string sortId = null, string sortStartTime = null, string sortCreatedAt = null, int? limit = null, int? offset = null, string fields = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CalllogsApi : ICalllogsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CalllogsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CalllogsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CalllogsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CalllogsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Show details of an individual Call Log entry See Call Logs for more detail.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="callId">Call ID</param>
        /// <returns>CallLogFull</returns>
        public CallLogFull GetAccountCallLogs (int? accountId, string callId)
        {
             ApiResponse<CallLogFull> localVarResponse = GetAccountCallLogsWithHttpInfo(accountId, callId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Show details of an individual Call Log entry See Call Logs for more detail.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="callId">Call ID</param>
        /// <returns>ApiResponse of CallLogFull</returns>
        public ApiResponse< CallLogFull > GetAccountCallLogsWithHttpInfo (int? accountId, string callId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CalllogsApi->GetAccountCallLogs");
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400, "Missing required parameter 'callId' when calling CalllogsApi->GetAccountCallLogs");

            var localVarPath = "/accounts/{account_id}/call-logs/{call_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (callId != null) localVarPathParams.Add("call_id", Configuration.ApiClient.ParameterToString(callId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountCallLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallLogFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CallLogFull) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallLogFull)));
            
        }

        /// <summary>
        /// Show details of an individual Call Log entry See Call Logs for more detail.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="callId">Call ID</param>
        /// <returns>Task of CallLogFull</returns>
        public async System.Threading.Tasks.Task<CallLogFull> GetAccountCallLogsAsync (int? accountId, string callId)
        {
             ApiResponse<CallLogFull> localVarResponse = await GetAccountCallLogsAsyncWithHttpInfo(accountId, callId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Show details of an individual Call Log entry See Call Logs for more detail.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="callId">Call ID</param>
        /// <returns>Task of ApiResponse (CallLogFull)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CallLogFull>> GetAccountCallLogsAsyncWithHttpInfo (int? accountId, string callId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CalllogsApi->GetAccountCallLogs");
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400, "Missing required parameter 'callId' when calling CalllogsApi->GetAccountCallLogs");

            var localVarPath = "/accounts/{account_id}/call-logs/{call_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (callId != null) localVarPathParams.Add("call_id", Configuration.ApiClient.ParameterToString(callId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountCallLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallLogFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CallLogFull) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallLogFull)));
            
        }

        /// <summary>
        /// Get a list of call details associated with your account See Call Logs for more detail.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="filtersStartTime">Call start time filter (optional)</param>
        /// <param name="filtersCreatedAt">Call log creation time filter (optional)</param>
        /// <param name="filtersDirection">Call direction filter: in or out (optional)</param>
        /// <param name="filtersCalledNumber">Called number (optional)</param>
        /// <param name="filtersType">Call type, such as &#39;call&#39;, &#39;fax&#39;, &#39;audiogram&#39; (optional)</param>
        /// <param name="filtersExtension">Extension filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="sortStartTime">Sorting by call start time: asc or desc (optional)</param>
        /// <param name="sortCreatedAt">Sorting by call log creation time: asc or desc (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>ListCallLogs</returns>
        public ListCallLogs ListAccountCallLogs (int? accountId, List<string> filtersId = null, List<string> filtersStartTime = null, string filtersCreatedAt = null, string filtersDirection = null, string filtersCalledNumber = null, string filtersType = null, List<string> filtersExtension = null, string sortId = null, string sortStartTime = null, string sortCreatedAt = null, int? limit = null, int? offset = null, string fields = null)
        {
             ApiResponse<ListCallLogs> localVarResponse = ListAccountCallLogsWithHttpInfo(accountId, filtersId, filtersStartTime, filtersCreatedAt, filtersDirection, filtersCalledNumber, filtersType, filtersExtension, sortId, sortStartTime, sortCreatedAt, limit, offset, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of call details associated with your account See Call Logs for more detail.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="filtersStartTime">Call start time filter (optional)</param>
        /// <param name="filtersCreatedAt">Call log creation time filter (optional)</param>
        /// <param name="filtersDirection">Call direction filter: in or out (optional)</param>
        /// <param name="filtersCalledNumber">Called number (optional)</param>
        /// <param name="filtersType">Call type, such as &#39;call&#39;, &#39;fax&#39;, &#39;audiogram&#39; (optional)</param>
        /// <param name="filtersExtension">Extension filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="sortStartTime">Sorting by call start time: asc or desc (optional)</param>
        /// <param name="sortCreatedAt">Sorting by call log creation time: asc or desc (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>ApiResponse of ListCallLogs</returns>
        public ApiResponse< ListCallLogs > ListAccountCallLogsWithHttpInfo (int? accountId, List<string> filtersId = null, List<string> filtersStartTime = null, string filtersCreatedAt = null, string filtersDirection = null, string filtersCalledNumber = null, string filtersType = null, List<string> filtersExtension = null, string sortId = null, string sortStartTime = null, string sortCreatedAt = null, int? limit = null, int? offset = null, string fields = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CalllogsApi->ListAccountCallLogs");

            var localVarPath = "/accounts/{account_id}/call-logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (filtersId != null) localVarQueryParams.Add("filters[id]", Configuration.ApiClient.ParameterToString(filtersId)); // query parameter
            if (filtersStartTime != null) localVarQueryParams.Add("filters[start_time]", Configuration.ApiClient.ParameterToString(filtersStartTime)); // query parameter
            if (filtersCreatedAt != null) localVarQueryParams.Add("filters[created_at]", Configuration.ApiClient.ParameterToString(filtersCreatedAt)); // query parameter
            if (filtersDirection != null) localVarQueryParams.Add("filters[direction]", Configuration.ApiClient.ParameterToString(filtersDirection)); // query parameter
            if (filtersCalledNumber != null) localVarQueryParams.Add("filters[called_number]", Configuration.ApiClient.ParameterToString(filtersCalledNumber)); // query parameter
            if (filtersType != null) localVarQueryParams.Add("filters[type]", Configuration.ApiClient.ParameterToString(filtersType)); // query parameter
            if (filtersExtension != null) localVarQueryParams.Add("filters[extension]", Configuration.ApiClient.ParameterToString(filtersExtension)); // query parameter
            if (sortId != null) localVarQueryParams.Add("sort[id]", Configuration.ApiClient.ParameterToString(sortId)); // query parameter
            if (sortStartTime != null) localVarQueryParams.Add("sort[start_time]", Configuration.ApiClient.ParameterToString(sortStartTime)); // query parameter
            if (sortCreatedAt != null) localVarQueryParams.Add("sort[created_at]", Configuration.ApiClient.ParameterToString(sortCreatedAt)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAccountCallLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListCallLogs>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListCallLogs) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListCallLogs)));
            
        }

        /// <summary>
        /// Get a list of call details associated with your account See Call Logs for more detail.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="filtersStartTime">Call start time filter (optional)</param>
        /// <param name="filtersCreatedAt">Call log creation time filter (optional)</param>
        /// <param name="filtersDirection">Call direction filter: in or out (optional)</param>
        /// <param name="filtersCalledNumber">Called number (optional)</param>
        /// <param name="filtersType">Call type, such as &#39;call&#39;, &#39;fax&#39;, &#39;audiogram&#39; (optional)</param>
        /// <param name="filtersExtension">Extension filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="sortStartTime">Sorting by call start time: asc or desc (optional)</param>
        /// <param name="sortCreatedAt">Sorting by call log creation time: asc or desc (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>Task of ListCallLogs</returns>
        public async System.Threading.Tasks.Task<ListCallLogs> ListAccountCallLogsAsync (int? accountId, List<string> filtersId = null, List<string> filtersStartTime = null, string filtersCreatedAt = null, string filtersDirection = null, string filtersCalledNumber = null, string filtersType = null, List<string> filtersExtension = null, string sortId = null, string sortStartTime = null, string sortCreatedAt = null, int? limit = null, int? offset = null, string fields = null)
        {
             ApiResponse<ListCallLogs> localVarResponse = await ListAccountCallLogsAsyncWithHttpInfo(accountId, filtersId, filtersStartTime, filtersCreatedAt, filtersDirection, filtersCalledNumber, filtersType, filtersExtension, sortId, sortStartTime, sortCreatedAt, limit, offset, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of call details associated with your account See Call Logs for more detail.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="filtersStartTime">Call start time filter (optional)</param>
        /// <param name="filtersCreatedAt">Call log creation time filter (optional)</param>
        /// <param name="filtersDirection">Call direction filter: in or out (optional)</param>
        /// <param name="filtersCalledNumber">Called number (optional)</param>
        /// <param name="filtersType">Call type, such as &#39;call&#39;, &#39;fax&#39;, &#39;audiogram&#39; (optional)</param>
        /// <param name="filtersExtension">Extension filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="sortStartTime">Sorting by call start time: asc or desc (optional)</param>
        /// <param name="sortCreatedAt">Sorting by call log creation time: asc or desc (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>Task of ApiResponse (ListCallLogs)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListCallLogs>> ListAccountCallLogsAsyncWithHttpInfo (int? accountId, List<string> filtersId = null, List<string> filtersStartTime = null, string filtersCreatedAt = null, string filtersDirection = null, string filtersCalledNumber = null, string filtersType = null, List<string> filtersExtension = null, string sortId = null, string sortStartTime = null, string sortCreatedAt = null, int? limit = null, int? offset = null, string fields = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling CalllogsApi->ListAccountCallLogs");

            var localVarPath = "/accounts/{account_id}/call-logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (filtersId != null) localVarQueryParams.Add("filters[id]", Configuration.ApiClient.ParameterToString(filtersId)); // query parameter
            if (filtersStartTime != null) localVarQueryParams.Add("filters[start_time]", Configuration.ApiClient.ParameterToString(filtersStartTime)); // query parameter
            if (filtersCreatedAt != null) localVarQueryParams.Add("filters[created_at]", Configuration.ApiClient.ParameterToString(filtersCreatedAt)); // query parameter
            if (filtersDirection != null) localVarQueryParams.Add("filters[direction]", Configuration.ApiClient.ParameterToString(filtersDirection)); // query parameter
            if (filtersCalledNumber != null) localVarQueryParams.Add("filters[called_number]", Configuration.ApiClient.ParameterToString(filtersCalledNumber)); // query parameter
            if (filtersType != null) localVarQueryParams.Add("filters[type]", Configuration.ApiClient.ParameterToString(filtersType)); // query parameter
            if (filtersExtension != null) localVarQueryParams.Add("filters[extension]", Configuration.ApiClient.ParameterToString(filtersExtension)); // query parameter
            if (sortId != null) localVarQueryParams.Add("sort[id]", Configuration.ApiClient.ParameterToString(sortId)); // query parameter
            if (sortStartTime != null) localVarQueryParams.Add("sort[start_time]", Configuration.ApiClient.ParameterToString(sortStartTime)); // query parameter
            if (sortCreatedAt != null) localVarQueryParams.Add("sort[created_at]", Configuration.ApiClient.ParameterToString(sortCreatedAt)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAccountCallLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListCallLogs>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListCallLogs) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListCallLogs)));
            
        }

    }
}
