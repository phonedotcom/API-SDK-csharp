/* 
 * Phone.com API
 *
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVoicemailApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This service shows the details of an individual voicemail.
        /// </summary>
        /// <remarks>
        /// This service shows the details of an individual voicemail. See Intro to Voicemail for more info on the properties. Note: This API is for users with Account Owner scope access token. Users with Extension User scope token should invoke the Get Voicemail API with the following definition: GET https://api.phone.com/v4/accounts/:account_id/extensions/:extension_id/voicemail/:voicemail_id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="voicemailId">Voicemail ID</param>
        /// <returns>VoicemailFull</returns>
        VoicemailFull GetAccountVoicemail (int? accountId, string voicemailId);

        /// <summary>
        /// This service shows the details of an individual voicemail.
        /// </summary>
        /// <remarks>
        /// This service shows the details of an individual voicemail. See Intro to Voicemail for more info on the properties. Note: This API is for users with Account Owner scope access token. Users with Extension User scope token should invoke the Get Voicemail API with the following definition: GET https://api.phone.com/v4/accounts/:account_id/extensions/:extension_id/voicemail/:voicemail_id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="voicemailId">Voicemail ID</param>
        /// <returns>ApiResponse of VoicemailFull</returns>
        ApiResponse<VoicemailFull> GetAccountVoicemailWithHttpInfo (int? accountId, string voicemailId);
        /// <summary>
        /// Get a list of voicemail messages for an account.
        /// </summary>
        /// <remarks>
        /// Get a list of voicemail messages for an account. See Intro to Voicemail for more info on the properties. Note: This API is for users with Account Owner scope access token. Users with Extension User scope token should invoke the List Voicemail API with the following definition: GET https://api.phone.com/v4/accounts/:account_id/extensions/:extension_id/voicemail
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="filtersFrom">Caller ID filter (optional)</param>
        /// <param name="filtersTo">Callee ID filter, the E.164 phone number to send the SMS TO. Note you must encode the + as %2B (optional)</param>
        /// <param name="filtersIsNew"> (optional)</param>
        /// <param name="filtersCreatedAt">Date string representing the UTC time that sms was created (optional)</param>
        /// <param name="filtersExtension">Extension filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="sortCreatedAt">Sort by the UTC time that voicemail was created (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>ListVoicemail</returns>
        ListVoicemail ListAccountVoicemail (int? accountId, List<string> filtersId = null, string filtersFrom = null, string filtersTo = null, bool? filtersIsNew = null, string filtersCreatedAt = null, List<string> filtersExtension = null, string sortId = null, string sortCreatedAt = null, int? limit = null, int? offset = null, string fields = null);

        /// <summary>
        /// Get a list of voicemail messages for an account.
        /// </summary>
        /// <remarks>
        /// Get a list of voicemail messages for an account. See Intro to Voicemail for more info on the properties. Note: This API is for users with Account Owner scope access token. Users with Extension User scope token should invoke the List Voicemail API with the following definition: GET https://api.phone.com/v4/accounts/:account_id/extensions/:extension_id/voicemail
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="filtersFrom">Caller ID filter (optional)</param>
        /// <param name="filtersTo">Callee ID filter, the E.164 phone number to send the SMS TO. Note you must encode the + as %2B (optional)</param>
        /// <param name="filtersIsNew"> (optional)</param>
        /// <param name="filtersCreatedAt">Date string representing the UTC time that sms was created (optional)</param>
        /// <param name="filtersExtension">Extension filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="sortCreatedAt">Sort by the UTC time that voicemail was created (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>ApiResponse of ListVoicemail</returns>
        ApiResponse<ListVoicemail> ListAccountVoicemailWithHttpInfo (int? accountId, List<string> filtersId = null, string filtersFrom = null, string filtersTo = null, bool? filtersIsNew = null, string filtersCreatedAt = null, List<string> filtersExtension = null, string sortId = null, string sortCreatedAt = null, int? limit = null, int? offset = null, string fields = null);
        /// <summary>
        /// Update the is_new parameter in a voicemail record.
        /// </summary>
        /// <remarks>
        /// Update the is_new parameter in a voicemail record. See Account Voicemail for more info on the properties. Note: This API is for users with Account Owner scope access token. Users with Extension User scope token should invoke the Patch Voicemail API with the following definition: PATCH https://api.phone.com/v4/accounts/:account_id/extensions/:extension_id/voicemail/:voicemail_id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="voicemailId">Voicemail ID</param>
        /// <param name="data">Payment data (optional)</param>
        /// <returns>VoicemailFull</returns>
        VoicemailFull PatchAccountVoicemail (int? accountId, string voicemailId, PatchVoicemailParams data = null);

        /// <summary>
        /// Update the is_new parameter in a voicemail record.
        /// </summary>
        /// <remarks>
        /// Update the is_new parameter in a voicemail record. See Account Voicemail for more info on the properties. Note: This API is for users with Account Owner scope access token. Users with Extension User scope token should invoke the Patch Voicemail API with the following definition: PATCH https://api.phone.com/v4/accounts/:account_id/extensions/:extension_id/voicemail/:voicemail_id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="voicemailId">Voicemail ID</param>
        /// <param name="data">Payment data (optional)</param>
        /// <returns>ApiResponse of VoicemailFull</returns>
        ApiResponse<VoicemailFull> PatchAccountVoicemailWithHttpInfo (int? accountId, string voicemailId, PatchVoicemailParams data = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This service shows the details of an individual voicemail.
        /// </summary>
        /// <remarks>
        /// This service shows the details of an individual voicemail. See Intro to Voicemail for more info on the properties. Note: This API is for users with Account Owner scope access token. Users with Extension User scope token should invoke the Get Voicemail API with the following definition: GET https://api.phone.com/v4/accounts/:account_id/extensions/:extension_id/voicemail/:voicemail_id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="voicemailId">Voicemail ID</param>
        /// <returns>Task of VoicemailFull</returns>
        System.Threading.Tasks.Task<VoicemailFull> GetAccountVoicemailAsync (int? accountId, string voicemailId);

        /// <summary>
        /// This service shows the details of an individual voicemail.
        /// </summary>
        /// <remarks>
        /// This service shows the details of an individual voicemail. See Intro to Voicemail for more info on the properties. Note: This API is for users with Account Owner scope access token. Users with Extension User scope token should invoke the Get Voicemail API with the following definition: GET https://api.phone.com/v4/accounts/:account_id/extensions/:extension_id/voicemail/:voicemail_id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="voicemailId">Voicemail ID</param>
        /// <returns>Task of ApiResponse (VoicemailFull)</returns>
        System.Threading.Tasks.Task<ApiResponse<VoicemailFull>> GetAccountVoicemailAsyncWithHttpInfo (int? accountId, string voicemailId);
        /// <summary>
        /// Get a list of voicemail messages for an account.
        /// </summary>
        /// <remarks>
        /// Get a list of voicemail messages for an account. See Intro to Voicemail for more info on the properties. Note: This API is for users with Account Owner scope access token. Users with Extension User scope token should invoke the List Voicemail API with the following definition: GET https://api.phone.com/v4/accounts/:account_id/extensions/:extension_id/voicemail
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="filtersFrom">Caller ID filter (optional)</param>
        /// <param name="filtersTo">Callee ID filter, the E.164 phone number to send the SMS TO. Note you must encode the + as %2B (optional)</param>
        /// <param name="filtersIsNew"> (optional)</param>
        /// <param name="filtersCreatedAt">Date string representing the UTC time that sms was created (optional)</param>
        /// <param name="filtersExtension">Extension filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="sortCreatedAt">Sort by the UTC time that voicemail was created (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>Task of ListVoicemail</returns>
        System.Threading.Tasks.Task<ListVoicemail> ListAccountVoicemailAsync (int? accountId, List<string> filtersId = null, string filtersFrom = null, string filtersTo = null, bool? filtersIsNew = null, string filtersCreatedAt = null, List<string> filtersExtension = null, string sortId = null, string sortCreatedAt = null, int? limit = null, int? offset = null, string fields = null);

        /// <summary>
        /// Get a list of voicemail messages for an account.
        /// </summary>
        /// <remarks>
        /// Get a list of voicemail messages for an account. See Intro to Voicemail for more info on the properties. Note: This API is for users with Account Owner scope access token. Users with Extension User scope token should invoke the List Voicemail API with the following definition: GET https://api.phone.com/v4/accounts/:account_id/extensions/:extension_id/voicemail
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="filtersFrom">Caller ID filter (optional)</param>
        /// <param name="filtersTo">Callee ID filter, the E.164 phone number to send the SMS TO. Note you must encode the + as %2B (optional)</param>
        /// <param name="filtersIsNew"> (optional)</param>
        /// <param name="filtersCreatedAt">Date string representing the UTC time that sms was created (optional)</param>
        /// <param name="filtersExtension">Extension filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="sortCreatedAt">Sort by the UTC time that voicemail was created (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>Task of ApiResponse (ListVoicemail)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListVoicemail>> ListAccountVoicemailAsyncWithHttpInfo (int? accountId, List<string> filtersId = null, string filtersFrom = null, string filtersTo = null, bool? filtersIsNew = null, string filtersCreatedAt = null, List<string> filtersExtension = null, string sortId = null, string sortCreatedAt = null, int? limit = null, int? offset = null, string fields = null);
        /// <summary>
        /// Update the is_new parameter in a voicemail record.
        /// </summary>
        /// <remarks>
        /// Update the is_new parameter in a voicemail record. See Account Voicemail for more info on the properties. Note: This API is for users with Account Owner scope access token. Users with Extension User scope token should invoke the Patch Voicemail API with the following definition: PATCH https://api.phone.com/v4/accounts/:account_id/extensions/:extension_id/voicemail/:voicemail_id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="voicemailId">Voicemail ID</param>
        /// <param name="data">Payment data (optional)</param>
        /// <returns>Task of VoicemailFull</returns>
        System.Threading.Tasks.Task<VoicemailFull> PatchAccountVoicemailAsync (int? accountId, string voicemailId, PatchVoicemailParams data = null);

        /// <summary>
        /// Update the is_new parameter in a voicemail record.
        /// </summary>
        /// <remarks>
        /// Update the is_new parameter in a voicemail record. See Account Voicemail for more info on the properties. Note: This API is for users with Account Owner scope access token. Users with Extension User scope token should invoke the Patch Voicemail API with the following definition: PATCH https://api.phone.com/v4/accounts/:account_id/extensions/:extension_id/voicemail/:voicemail_id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="voicemailId">Voicemail ID</param>
        /// <param name="data">Payment data (optional)</param>
        /// <returns>Task of ApiResponse (VoicemailFull)</returns>
        System.Threading.Tasks.Task<ApiResponse<VoicemailFull>> PatchAccountVoicemailAsyncWithHttpInfo (int? accountId, string voicemailId, PatchVoicemailParams data = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class VoicemailApi : IVoicemailApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="VoicemailApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VoicemailApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VoicemailApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public VoicemailApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This service shows the details of an individual voicemail. This service shows the details of an individual voicemail. See Intro to Voicemail for more info on the properties. Note: This API is for users with Account Owner scope access token. Users with Extension User scope token should invoke the Get Voicemail API with the following definition: GET https://api.phone.com/v4/accounts/:account_id/extensions/:extension_id/voicemail/:voicemail_id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="voicemailId">Voicemail ID</param>
        /// <returns>VoicemailFull</returns>
        public VoicemailFull GetAccountVoicemail (int? accountId, string voicemailId)
        {
             ApiResponse<VoicemailFull> localVarResponse = GetAccountVoicemailWithHttpInfo(accountId, voicemailId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This service shows the details of an individual voicemail. This service shows the details of an individual voicemail. See Intro to Voicemail for more info on the properties. Note: This API is for users with Account Owner scope access token. Users with Extension User scope token should invoke the Get Voicemail API with the following definition: GET https://api.phone.com/v4/accounts/:account_id/extensions/:extension_id/voicemail/:voicemail_id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="voicemailId">Voicemail ID</param>
        /// <returns>ApiResponse of VoicemailFull</returns>
        public ApiResponse< VoicemailFull > GetAccountVoicemailWithHttpInfo (int? accountId, string voicemailId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling VoicemailApi->GetAccountVoicemail");
            // verify the required parameter 'voicemailId' is set
            if (voicemailId == null)
                throw new ApiException(400, "Missing required parameter 'voicemailId' when calling VoicemailApi->GetAccountVoicemail");

            var localVarPath = "/accounts/{account_id}/voicemail/{voicemail_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (voicemailId != null) localVarPathParams.Add("voicemail_id", Configuration.ApiClient.ParameterToString(voicemailId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountVoicemail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VoicemailFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VoicemailFull) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VoicemailFull)));
        }

        /// <summary>
        /// This service shows the details of an individual voicemail. This service shows the details of an individual voicemail. See Intro to Voicemail for more info on the properties. Note: This API is for users with Account Owner scope access token. Users with Extension User scope token should invoke the Get Voicemail API with the following definition: GET https://api.phone.com/v4/accounts/:account_id/extensions/:extension_id/voicemail/:voicemail_id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="voicemailId">Voicemail ID</param>
        /// <returns>Task of VoicemailFull</returns>
        public async System.Threading.Tasks.Task<VoicemailFull> GetAccountVoicemailAsync (int? accountId, string voicemailId)
        {
             ApiResponse<VoicemailFull> localVarResponse = await GetAccountVoicemailAsyncWithHttpInfo(accountId, voicemailId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This service shows the details of an individual voicemail. This service shows the details of an individual voicemail. See Intro to Voicemail for more info on the properties. Note: This API is for users with Account Owner scope access token. Users with Extension User scope token should invoke the Get Voicemail API with the following definition: GET https://api.phone.com/v4/accounts/:account_id/extensions/:extension_id/voicemail/:voicemail_id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="voicemailId">Voicemail ID</param>
        /// <returns>Task of ApiResponse (VoicemailFull)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VoicemailFull>> GetAccountVoicemailAsyncWithHttpInfo (int? accountId, string voicemailId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling VoicemailApi->GetAccountVoicemail");
            // verify the required parameter 'voicemailId' is set
            if (voicemailId == null)
                throw new ApiException(400, "Missing required parameter 'voicemailId' when calling VoicemailApi->GetAccountVoicemail");

            var localVarPath = "/accounts/{account_id}/voicemail/{voicemail_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (voicemailId != null) localVarPathParams.Add("voicemail_id", Configuration.ApiClient.ParameterToString(voicemailId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountVoicemail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VoicemailFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VoicemailFull) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VoicemailFull)));
        }

        /// <summary>
        /// Get a list of voicemail messages for an account. Get a list of voicemail messages for an account. See Intro to Voicemail for more info on the properties. Note: This API is for users with Account Owner scope access token. Users with Extension User scope token should invoke the List Voicemail API with the following definition: GET https://api.phone.com/v4/accounts/:account_id/extensions/:extension_id/voicemail
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="filtersFrom">Caller ID filter (optional)</param>
        /// <param name="filtersTo">Callee ID filter, the E.164 phone number to send the SMS TO. Note you must encode the + as %2B (optional)</param>
        /// <param name="filtersIsNew"> (optional)</param>
        /// <param name="filtersCreatedAt">Date string representing the UTC time that sms was created (optional)</param>
        /// <param name="filtersExtension">Extension filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="sortCreatedAt">Sort by the UTC time that voicemail was created (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>ListVoicemail</returns>
        public ListVoicemail ListAccountVoicemail (int? accountId, List<string> filtersId = null, string filtersFrom = null, string filtersTo = null, bool? filtersIsNew = null, string filtersCreatedAt = null, List<string> filtersExtension = null, string sortId = null, string sortCreatedAt = null, int? limit = null, int? offset = null, string fields = null)
        {
             ApiResponse<ListVoicemail> localVarResponse = ListAccountVoicemailWithHttpInfo(accountId, filtersId, filtersFrom, filtersTo, filtersIsNew, filtersCreatedAt, filtersExtension, sortId, sortCreatedAt, limit, offset, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of voicemail messages for an account. Get a list of voicemail messages for an account. See Intro to Voicemail for more info on the properties. Note: This API is for users with Account Owner scope access token. Users with Extension User scope token should invoke the List Voicemail API with the following definition: GET https://api.phone.com/v4/accounts/:account_id/extensions/:extension_id/voicemail
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="filtersFrom">Caller ID filter (optional)</param>
        /// <param name="filtersTo">Callee ID filter, the E.164 phone number to send the SMS TO. Note you must encode the + as %2B (optional)</param>
        /// <param name="filtersIsNew"> (optional)</param>
        /// <param name="filtersCreatedAt">Date string representing the UTC time that sms was created (optional)</param>
        /// <param name="filtersExtension">Extension filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="sortCreatedAt">Sort by the UTC time that voicemail was created (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>ApiResponse of ListVoicemail</returns>
        public ApiResponse< ListVoicemail > ListAccountVoicemailWithHttpInfo (int? accountId, List<string> filtersId = null, string filtersFrom = null, string filtersTo = null, bool? filtersIsNew = null, string filtersCreatedAt = null, List<string> filtersExtension = null, string sortId = null, string sortCreatedAt = null, int? limit = null, int? offset = null, string fields = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling VoicemailApi->ListAccountVoicemail");

            var localVarPath = "/accounts/{account_id}/voicemail";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (filtersId != null) localVarQueryParams.Add("filters[id]", Configuration.ApiClient.ParameterToString(filtersId)); // query parameter
            if (filtersFrom != null) localVarQueryParams.Add("filters[from]", Configuration.ApiClient.ParameterToString(filtersFrom)); // query parameter
            if (filtersTo != null) localVarQueryParams.Add("filters[to]", Configuration.ApiClient.ParameterToString(filtersTo)); // query parameter
            if (filtersIsNew != null) localVarQueryParams.Add("filters[is_new]", Configuration.ApiClient.ParameterToString(filtersIsNew)); // query parameter
            if (filtersCreatedAt != null) localVarQueryParams.Add("filters[created_at]", Configuration.ApiClient.ParameterToString(filtersCreatedAt)); // query parameter
            if (filtersExtension != null) localVarQueryParams.Add("filters[extension]", Configuration.ApiClient.ParameterToString(filtersExtension)); // query parameter
            if (sortId != null) localVarQueryParams.Add("sort[id]", Configuration.ApiClient.ParameterToString(sortId)); // query parameter
            if (sortCreatedAt != null) localVarQueryParams.Add("sort[created_at]", Configuration.ApiClient.ParameterToString(sortCreatedAt)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAccountVoicemail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListVoicemail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListVoicemail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListVoicemail)));
        }

        /// <summary>
        /// Get a list of voicemail messages for an account. Get a list of voicemail messages for an account. See Intro to Voicemail for more info on the properties. Note: This API is for users with Account Owner scope access token. Users with Extension User scope token should invoke the List Voicemail API with the following definition: GET https://api.phone.com/v4/accounts/:account_id/extensions/:extension_id/voicemail
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="filtersFrom">Caller ID filter (optional)</param>
        /// <param name="filtersTo">Callee ID filter, the E.164 phone number to send the SMS TO. Note you must encode the + as %2B (optional)</param>
        /// <param name="filtersIsNew"> (optional)</param>
        /// <param name="filtersCreatedAt">Date string representing the UTC time that sms was created (optional)</param>
        /// <param name="filtersExtension">Extension filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="sortCreatedAt">Sort by the UTC time that voicemail was created (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>Task of ListVoicemail</returns>
        public async System.Threading.Tasks.Task<ListVoicemail> ListAccountVoicemailAsync (int? accountId, List<string> filtersId = null, string filtersFrom = null, string filtersTo = null, bool? filtersIsNew = null, string filtersCreatedAt = null, List<string> filtersExtension = null, string sortId = null, string sortCreatedAt = null, int? limit = null, int? offset = null, string fields = null)
        {
             ApiResponse<ListVoicemail> localVarResponse = await ListAccountVoicemailAsyncWithHttpInfo(accountId, filtersId, filtersFrom, filtersTo, filtersIsNew, filtersCreatedAt, filtersExtension, sortId, sortCreatedAt, limit, offset, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of voicemail messages for an account. Get a list of voicemail messages for an account. See Intro to Voicemail for more info on the properties. Note: This API is for users with Account Owner scope access token. Users with Extension User scope token should invoke the List Voicemail API with the following definition: GET https://api.phone.com/v4/accounts/:account_id/extensions/:extension_id/voicemail
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="filtersFrom">Caller ID filter (optional)</param>
        /// <param name="filtersTo">Callee ID filter, the E.164 phone number to send the SMS TO. Note you must encode the + as %2B (optional)</param>
        /// <param name="filtersIsNew"> (optional)</param>
        /// <param name="filtersCreatedAt">Date string representing the UTC time that sms was created (optional)</param>
        /// <param name="filtersExtension">Extension filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="sortCreatedAt">Sort by the UTC time that voicemail was created (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>Task of ApiResponse (ListVoicemail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListVoicemail>> ListAccountVoicemailAsyncWithHttpInfo (int? accountId, List<string> filtersId = null, string filtersFrom = null, string filtersTo = null, bool? filtersIsNew = null, string filtersCreatedAt = null, List<string> filtersExtension = null, string sortId = null, string sortCreatedAt = null, int? limit = null, int? offset = null, string fields = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling VoicemailApi->ListAccountVoicemail");

            var localVarPath = "/accounts/{account_id}/voicemail";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (filtersId != null) localVarQueryParams.Add("filters[id]", Configuration.ApiClient.ParameterToString(filtersId)); // query parameter
            if (filtersFrom != null) localVarQueryParams.Add("filters[from]", Configuration.ApiClient.ParameterToString(filtersFrom)); // query parameter
            if (filtersTo != null) localVarQueryParams.Add("filters[to]", Configuration.ApiClient.ParameterToString(filtersTo)); // query parameter
            if (filtersIsNew != null) localVarQueryParams.Add("filters[is_new]", Configuration.ApiClient.ParameterToString(filtersIsNew)); // query parameter
            if (filtersCreatedAt != null) localVarQueryParams.Add("filters[created_at]", Configuration.ApiClient.ParameterToString(filtersCreatedAt)); // query parameter
            if (filtersExtension != null) localVarQueryParams.Add("filters[extension]", Configuration.ApiClient.ParameterToString(filtersExtension)); // query parameter
            if (sortId != null) localVarQueryParams.Add("sort[id]", Configuration.ApiClient.ParameterToString(sortId)); // query parameter
            if (sortCreatedAt != null) localVarQueryParams.Add("sort[created_at]", Configuration.ApiClient.ParameterToString(sortCreatedAt)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAccountVoicemail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListVoicemail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListVoicemail) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListVoicemail)));
        }

        /// <summary>
        /// Update the is_new parameter in a voicemail record. Update the is_new parameter in a voicemail record. See Account Voicemail for more info on the properties. Note: This API is for users with Account Owner scope access token. Users with Extension User scope token should invoke the Patch Voicemail API with the following definition: PATCH https://api.phone.com/v4/accounts/:account_id/extensions/:extension_id/voicemail/:voicemail_id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="voicemailId">Voicemail ID</param>
        /// <param name="data">Payment data (optional)</param>
        /// <returns>VoicemailFull</returns>
        public VoicemailFull PatchAccountVoicemail (int? accountId, string voicemailId, PatchVoicemailParams data = null)
        {
             ApiResponse<VoicemailFull> localVarResponse = PatchAccountVoicemailWithHttpInfo(accountId, voicemailId, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update the is_new parameter in a voicemail record. Update the is_new parameter in a voicemail record. See Account Voicemail for more info on the properties. Note: This API is for users with Account Owner scope access token. Users with Extension User scope token should invoke the Patch Voicemail API with the following definition: PATCH https://api.phone.com/v4/accounts/:account_id/extensions/:extension_id/voicemail/:voicemail_id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="voicemailId">Voicemail ID</param>
        /// <param name="data">Payment data (optional)</param>
        /// <returns>ApiResponse of VoicemailFull</returns>
        public ApiResponse< VoicemailFull > PatchAccountVoicemailWithHttpInfo (int? accountId, string voicemailId, PatchVoicemailParams data = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling VoicemailApi->PatchAccountVoicemail");
            // verify the required parameter 'voicemailId' is set
            if (voicemailId == null)
                throw new ApiException(400, "Missing required parameter 'voicemailId' when calling VoicemailApi->PatchAccountVoicemail");

            var localVarPath = "/accounts/{account_id}/voicemail/{voicemail_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (voicemailId != null) localVarPathParams.Add("voicemail_id", Configuration.ApiClient.ParameterToString(voicemailId)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchAccountVoicemail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VoicemailFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VoicemailFull) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VoicemailFull)));
        }

        /// <summary>
        /// Update the is_new parameter in a voicemail record. Update the is_new parameter in a voicemail record. See Account Voicemail for more info on the properties. Note: This API is for users with Account Owner scope access token. Users with Extension User scope token should invoke the Patch Voicemail API with the following definition: PATCH https://api.phone.com/v4/accounts/:account_id/extensions/:extension_id/voicemail/:voicemail_id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="voicemailId">Voicemail ID</param>
        /// <param name="data">Payment data (optional)</param>
        /// <returns>Task of VoicemailFull</returns>
        public async System.Threading.Tasks.Task<VoicemailFull> PatchAccountVoicemailAsync (int? accountId, string voicemailId, PatchVoicemailParams data = null)
        {
             ApiResponse<VoicemailFull> localVarResponse = await PatchAccountVoicemailAsyncWithHttpInfo(accountId, voicemailId, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update the is_new parameter in a voicemail record. Update the is_new parameter in a voicemail record. See Account Voicemail for more info on the properties. Note: This API is for users with Account Owner scope access token. Users with Extension User scope token should invoke the Patch Voicemail API with the following definition: PATCH https://api.phone.com/v4/accounts/:account_id/extensions/:extension_id/voicemail/:voicemail_id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="voicemailId">Voicemail ID</param>
        /// <param name="data">Payment data (optional)</param>
        /// <returns>Task of ApiResponse (VoicemailFull)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VoicemailFull>> PatchAccountVoicemailAsyncWithHttpInfo (int? accountId, string voicemailId, PatchVoicemailParams data = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling VoicemailApi->PatchAccountVoicemail");
            // verify the required parameter 'voicemailId' is set
            if (voicemailId == null)
                throw new ApiException(400, "Missing required parameter 'voicemailId' when calling VoicemailApi->PatchAccountVoicemail");

            var localVarPath = "/accounts/{account_id}/voicemail/{voicemail_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (voicemailId != null) localVarPathParams.Add("voicemail_id", Configuration.ApiClient.ParameterToString(voicemailId)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchAccountVoicemail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VoicemailFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VoicemailFull) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VoicemailFull)));
        }

    }
}
