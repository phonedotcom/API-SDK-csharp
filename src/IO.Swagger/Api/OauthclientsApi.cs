/* 
 * Phone.com API
 *
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOauthclientsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete an individual OAuth client.
        /// </summary>
        /// <remarks>
        /// Delete an individual OAuth client. See Account OAuth Clients for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="clientId">Client ID</param>
        /// <returns>DeleteEntry</returns>
        DeleteEntry DeleteAccountOauthClient (int? accountId, int? clientId);

        /// <summary>
        /// Delete an individual OAuth client.
        /// </summary>
        /// <remarks>
        /// Delete an individual OAuth client. See Account OAuth Clients for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="clientId">Client ID</param>
        /// <returns>ApiResponse of DeleteEntry</returns>
        ApiResponse<DeleteEntry> DeleteAccountOauthClientWithHttpInfo (int? accountId, int? clientId);
        /// <summary>
        /// Show details of an individual OAuth client.
        /// </summary>
        /// <remarks>
        /// Show details of an individual OAuth client. See Account OAuth Clients for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="clientId">Client ID</param>
        /// <returns>OauthClientFull</returns>
        OauthClientFull GetAccountOauthClient (int? accountId, int? clientId);

        /// <summary>
        /// Show details of an individual OAuth client.
        /// </summary>
        /// <remarks>
        /// Show details of an individual OAuth client. See Account OAuth Clients for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="clientId">Client ID</param>
        /// <returns>ApiResponse of OauthClientFull</returns>
        ApiResponse<OauthClientFull> GetAccountOauthClientWithHttpInfo (int? accountId, int? clientId);
        /// <summary>
        /// Get a list of OAuth clients for an account.
        /// </summary>
        /// <remarks>
        /// Get a list of OAuth clients for an account. See Account OAuth Clients for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>ListOauthClients</returns>
        ListOauthClients ListAccountOauthClients (int? accountId, List<string> filtersId = null, string sortId = null, int? limit = null, int? offset = null, string fields = null);

        /// <summary>
        /// Get a list of OAuth clients for an account.
        /// </summary>
        /// <remarks>
        /// Get a list of OAuth clients for an account. See Account OAuth Clients for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>ApiResponse of ListOauthClients</returns>
        ApiResponse<ListOauthClients> ListAccountOauthClientsWithHttpInfo (int? accountId, List<string> filtersId = null, string sortId = null, int? limit = null, int? offset = null, string fields = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete an individual OAuth client.
        /// </summary>
        /// <remarks>
        /// Delete an individual OAuth client. See Account OAuth Clients for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="clientId">Client ID</param>
        /// <returns>Task of DeleteEntry</returns>
        System.Threading.Tasks.Task<DeleteEntry> DeleteAccountOauthClientAsync (int? accountId, int? clientId);

        /// <summary>
        /// Delete an individual OAuth client.
        /// </summary>
        /// <remarks>
        /// Delete an individual OAuth client. See Account OAuth Clients for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="clientId">Client ID</param>
        /// <returns>Task of ApiResponse (DeleteEntry)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteEntry>> DeleteAccountOauthClientAsyncWithHttpInfo (int? accountId, int? clientId);
        /// <summary>
        /// Show details of an individual OAuth client.
        /// </summary>
        /// <remarks>
        /// Show details of an individual OAuth client. See Account OAuth Clients for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="clientId">Client ID</param>
        /// <returns>Task of OauthClientFull</returns>
        System.Threading.Tasks.Task<OauthClientFull> GetAccountOauthClientAsync (int? accountId, int? clientId);

        /// <summary>
        /// Show details of an individual OAuth client.
        /// </summary>
        /// <remarks>
        /// Show details of an individual OAuth client. See Account OAuth Clients for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="clientId">Client ID</param>
        /// <returns>Task of ApiResponse (OauthClientFull)</returns>
        System.Threading.Tasks.Task<ApiResponse<OauthClientFull>> GetAccountOauthClientAsyncWithHttpInfo (int? accountId, int? clientId);
        /// <summary>
        /// Get a list of OAuth clients for an account.
        /// </summary>
        /// <remarks>
        /// Get a list of OAuth clients for an account. See Account OAuth Clients for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>Task of ListOauthClients</returns>
        System.Threading.Tasks.Task<ListOauthClients> ListAccountOauthClientsAsync (int? accountId, List<string> filtersId = null, string sortId = null, int? limit = null, int? offset = null, string fields = null);

        /// <summary>
        /// Get a list of OAuth clients for an account.
        /// </summary>
        /// <remarks>
        /// Get a list of OAuth clients for an account. See Account OAuth Clients for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>Task of ApiResponse (ListOauthClients)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListOauthClients>> ListAccountOauthClientsAsyncWithHttpInfo (int? accountId, List<string> filtersId = null, string sortId = null, int? limit = null, int? offset = null, string fields = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OauthclientsApi : IOauthclientsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OauthclientsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OauthclientsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OauthclientsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OauthclientsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete an individual OAuth client. Delete an individual OAuth client. See Account OAuth Clients for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="clientId">Client ID</param>
        /// <returns>DeleteEntry</returns>
        public DeleteEntry DeleteAccountOauthClient (int? accountId, int? clientId)
        {
             ApiResponse<DeleteEntry> localVarResponse = DeleteAccountOauthClientWithHttpInfo(accountId, clientId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an individual OAuth client. Delete an individual OAuth client. See Account OAuth Clients for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="clientId">Client ID</param>
        /// <returns>ApiResponse of DeleteEntry</returns>
        public ApiResponse< DeleteEntry > DeleteAccountOauthClientWithHttpInfo (int? accountId, int? clientId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling OauthclientsApi->DeleteAccountOauthClient");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling OauthclientsApi->DeleteAccountOauthClient");

            var localVarPath = "/accounts/{account_id}/oauth/clients/{client_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (clientId != null) localVarPathParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAccountOauthClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteEntry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteEntry) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteEntry)));
        }

        /// <summary>
        /// Delete an individual OAuth client. Delete an individual OAuth client. See Account OAuth Clients for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="clientId">Client ID</param>
        /// <returns>Task of DeleteEntry</returns>
        public async System.Threading.Tasks.Task<DeleteEntry> DeleteAccountOauthClientAsync (int? accountId, int? clientId)
        {
             ApiResponse<DeleteEntry> localVarResponse = await DeleteAccountOauthClientAsyncWithHttpInfo(accountId, clientId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete an individual OAuth client. Delete an individual OAuth client. See Account OAuth Clients for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="clientId">Client ID</param>
        /// <returns>Task of ApiResponse (DeleteEntry)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeleteEntry>> DeleteAccountOauthClientAsyncWithHttpInfo (int? accountId, int? clientId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling OauthclientsApi->DeleteAccountOauthClient");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling OauthclientsApi->DeleteAccountOauthClient");

            var localVarPath = "/accounts/{account_id}/oauth/clients/{client_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (clientId != null) localVarPathParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAccountOauthClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteEntry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteEntry) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteEntry)));
        }

        /// <summary>
        /// Show details of an individual OAuth client. Show details of an individual OAuth client. See Account OAuth Clients for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="clientId">Client ID</param>
        /// <returns>OauthClientFull</returns>
        public OauthClientFull GetAccountOauthClient (int? accountId, int? clientId)
        {
             ApiResponse<OauthClientFull> localVarResponse = GetAccountOauthClientWithHttpInfo(accountId, clientId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Show details of an individual OAuth client. Show details of an individual OAuth client. See Account OAuth Clients for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="clientId">Client ID</param>
        /// <returns>ApiResponse of OauthClientFull</returns>
        public ApiResponse< OauthClientFull > GetAccountOauthClientWithHttpInfo (int? accountId, int? clientId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling OauthclientsApi->GetAccountOauthClient");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling OauthclientsApi->GetAccountOauthClient");

            var localVarPath = "/accounts/{account_id}/oauth/clients/{client_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (clientId != null) localVarPathParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountOauthClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OauthClientFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OauthClientFull) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OauthClientFull)));
        }

        /// <summary>
        /// Show details of an individual OAuth client. Show details of an individual OAuth client. See Account OAuth Clients for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="clientId">Client ID</param>
        /// <returns>Task of OauthClientFull</returns>
        public async System.Threading.Tasks.Task<OauthClientFull> GetAccountOauthClientAsync (int? accountId, int? clientId)
        {
             ApiResponse<OauthClientFull> localVarResponse = await GetAccountOauthClientAsyncWithHttpInfo(accountId, clientId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Show details of an individual OAuth client. Show details of an individual OAuth client. See Account OAuth Clients for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="clientId">Client ID</param>
        /// <returns>Task of ApiResponse (OauthClientFull)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OauthClientFull>> GetAccountOauthClientAsyncWithHttpInfo (int? accountId, int? clientId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling OauthclientsApi->GetAccountOauthClient");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling OauthclientsApi->GetAccountOauthClient");

            var localVarPath = "/accounts/{account_id}/oauth/clients/{client_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (clientId != null) localVarPathParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountOauthClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OauthClientFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OauthClientFull) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OauthClientFull)));
        }

        /// <summary>
        /// Get a list of OAuth clients for an account. Get a list of OAuth clients for an account. See Account OAuth Clients for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>ListOauthClients</returns>
        public ListOauthClients ListAccountOauthClients (int? accountId, List<string> filtersId = null, string sortId = null, int? limit = null, int? offset = null, string fields = null)
        {
             ApiResponse<ListOauthClients> localVarResponse = ListAccountOauthClientsWithHttpInfo(accountId, filtersId, sortId, limit, offset, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of OAuth clients for an account. Get a list of OAuth clients for an account. See Account OAuth Clients for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>ApiResponse of ListOauthClients</returns>
        public ApiResponse< ListOauthClients > ListAccountOauthClientsWithHttpInfo (int? accountId, List<string> filtersId = null, string sortId = null, int? limit = null, int? offset = null, string fields = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling OauthclientsApi->ListAccountOauthClients");

            var localVarPath = "/accounts/{account_id}/oauth/clients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (filtersId != null) localVarQueryParams.Add("filters[id]", Configuration.ApiClient.ParameterToString(filtersId)); // query parameter
            if (sortId != null) localVarQueryParams.Add("sort[id]", Configuration.ApiClient.ParameterToString(sortId)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAccountOauthClients", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListOauthClients>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListOauthClients) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListOauthClients)));
        }

        /// <summary>
        /// Get a list of OAuth clients for an account. Get a list of OAuth clients for an account. See Account OAuth Clients for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>Task of ListOauthClients</returns>
        public async System.Threading.Tasks.Task<ListOauthClients> ListAccountOauthClientsAsync (int? accountId, List<string> filtersId = null, string sortId = null, int? limit = null, int? offset = null, string fields = null)
        {
             ApiResponse<ListOauthClients> localVarResponse = await ListAccountOauthClientsAsyncWithHttpInfo(accountId, filtersId, sortId, limit, offset, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of OAuth clients for an account. Get a list of OAuth clients for an account. See Account OAuth Clients for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>Task of ApiResponse (ListOauthClients)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListOauthClients>> ListAccountOauthClientsAsyncWithHttpInfo (int? accountId, List<string> filtersId = null, string sortId = null, int? limit = null, int? offset = null, string fields = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling OauthclientsApi->ListAccountOauthClients");

            var localVarPath = "/accounts/{account_id}/oauth/clients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (filtersId != null) localVarQueryParams.Add("filters[id]", Configuration.ApiClient.ParameterToString(filtersId)); // query parameter
            if (sortId != null) localVarQueryParams.Add("sort[id]", Configuration.ApiClient.ParameterToString(sortId)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAccountOauthClients", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListOauthClients>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListOauthClients) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListOauthClients)));
        }

    }
}
