/* 
 * Phone.com API
 *
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubaccountpricingApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a pricing plan to a subaccount.
        /// </summary>
        /// <remarks>
        /// Add a pricing plan to a subaccount. See Account Subaccount Pricing for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="subaccountId">Subaccount ID</param>
        /// <param name="data">Subaccount pricing data</param>
        /// <returns>PricingFull</returns>
        PricingFull CreateAccountSubaccountPricing (int? accountId, int? subaccountId, CreatePricingParams data);

        /// <summary>
        /// Add a pricing plan to a subaccount.
        /// </summary>
        /// <remarks>
        /// Add a pricing plan to a subaccount. See Account Subaccount Pricing for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="subaccountId">Subaccount ID</param>
        /// <param name="data">Subaccount pricing data</param>
        /// <returns>ApiResponse of PricingFull</returns>
        ApiResponse<PricingFull> CreateAccountSubaccountPricingWithHttpInfo (int? accountId, int? subaccountId, CreatePricingParams data);
        /// <summary>
        /// Delete a pricing plan from a subaccount.
        /// </summary>
        /// <remarks>
        /// Delete a pricing plan from a subaccount. See Account Subaccount Pricing for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="subaccountId">Subaccount ID</param>
        /// <param name="pricingId">Pricing Object ID</param>
        /// <returns>DeleteEntry</returns>
        DeleteEntry DeleteAccountSubaccountPricing (int? accountId, int? subaccountId, int? pricingId);

        /// <summary>
        /// Delete a pricing plan from a subaccount.
        /// </summary>
        /// <remarks>
        /// Delete a pricing plan from a subaccount. See Account Subaccount Pricing for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="subaccountId">Subaccount ID</param>
        /// <param name="pricingId">Pricing Object ID</param>
        /// <returns>ApiResponse of DeleteEntry</returns>
        ApiResponse<DeleteEntry> DeleteAccountSubaccountPricingWithHttpInfo (int? accountId, int? subaccountId, int? pricingId);
        /// <summary>
        /// Get the details of a pricing plan for a subaccount.
        /// </summary>
        /// <remarks>
        /// Get the details of a pricing plan for a subaccount. See Account Subaccount Pricing for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="subaccountId">Subaccount ID</param>
        /// <param name="pricingId">Pricing Object ID</param>
        /// <returns>PricingFull</returns>
        PricingFull GetAccountSubaccountPricing (int? accountId, int? subaccountId, int? pricingId);

        /// <summary>
        /// Get the details of a pricing plan for a subaccount.
        /// </summary>
        /// <remarks>
        /// Get the details of a pricing plan for a subaccount. See Account Subaccount Pricing for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="subaccountId">Subaccount ID</param>
        /// <param name="pricingId">Pricing Object ID</param>
        /// <returns>ApiResponse of PricingFull</returns>
        ApiResponse<PricingFull> GetAccountSubaccountPricingWithHttpInfo (int? accountId, int? subaccountId, int? pricingId);
        /// <summary>
        /// Get a list of pricing plans for a subaccount.
        /// </summary>
        /// <remarks>
        /// Get a list of pricing plans for a subaccount. See Account Subaccount Pricing for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="subaccountId">Subaccount ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>ListPricings</returns>
        ListPricings ListAccountSubaccountPricing (int? accountId, int? subaccountId, List<string> filtersId = null, string sortId = null, int? limit = null, int? offset = null, string fields = null);

        /// <summary>
        /// Get a list of pricing plans for a subaccount.
        /// </summary>
        /// <remarks>
        /// Get a list of pricing plans for a subaccount. See Account Subaccount Pricing for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="subaccountId">Subaccount ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>ApiResponse of ListPricings</returns>
        ApiResponse<ListPricings> ListAccountSubaccountPricingWithHttpInfo (int? accountId, int? subaccountId, List<string> filtersId = null, string sortId = null, int? limit = null, int? offset = null, string fields = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add a pricing plan to a subaccount.
        /// </summary>
        /// <remarks>
        /// Add a pricing plan to a subaccount. See Account Subaccount Pricing for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="subaccountId">Subaccount ID</param>
        /// <param name="data">Subaccount pricing data</param>
        /// <returns>Task of PricingFull</returns>
        System.Threading.Tasks.Task<PricingFull> CreateAccountSubaccountPricingAsync (int? accountId, int? subaccountId, CreatePricingParams data);

        /// <summary>
        /// Add a pricing plan to a subaccount.
        /// </summary>
        /// <remarks>
        /// Add a pricing plan to a subaccount. See Account Subaccount Pricing for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="subaccountId">Subaccount ID</param>
        /// <param name="data">Subaccount pricing data</param>
        /// <returns>Task of ApiResponse (PricingFull)</returns>
        System.Threading.Tasks.Task<ApiResponse<PricingFull>> CreateAccountSubaccountPricingAsyncWithHttpInfo (int? accountId, int? subaccountId, CreatePricingParams data);
        /// <summary>
        /// Delete a pricing plan from a subaccount.
        /// </summary>
        /// <remarks>
        /// Delete a pricing plan from a subaccount. See Account Subaccount Pricing for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="subaccountId">Subaccount ID</param>
        /// <param name="pricingId">Pricing Object ID</param>
        /// <returns>Task of DeleteEntry</returns>
        System.Threading.Tasks.Task<DeleteEntry> DeleteAccountSubaccountPricingAsync (int? accountId, int? subaccountId, int? pricingId);

        /// <summary>
        /// Delete a pricing plan from a subaccount.
        /// </summary>
        /// <remarks>
        /// Delete a pricing plan from a subaccount. See Account Subaccount Pricing for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="subaccountId">Subaccount ID</param>
        /// <param name="pricingId">Pricing Object ID</param>
        /// <returns>Task of ApiResponse (DeleteEntry)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteEntry>> DeleteAccountSubaccountPricingAsyncWithHttpInfo (int? accountId, int? subaccountId, int? pricingId);
        /// <summary>
        /// Get the details of a pricing plan for a subaccount.
        /// </summary>
        /// <remarks>
        /// Get the details of a pricing plan for a subaccount. See Account Subaccount Pricing for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="subaccountId">Subaccount ID</param>
        /// <param name="pricingId">Pricing Object ID</param>
        /// <returns>Task of PricingFull</returns>
        System.Threading.Tasks.Task<PricingFull> GetAccountSubaccountPricingAsync (int? accountId, int? subaccountId, int? pricingId);

        /// <summary>
        /// Get the details of a pricing plan for a subaccount.
        /// </summary>
        /// <remarks>
        /// Get the details of a pricing plan for a subaccount. See Account Subaccount Pricing for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="subaccountId">Subaccount ID</param>
        /// <param name="pricingId">Pricing Object ID</param>
        /// <returns>Task of ApiResponse (PricingFull)</returns>
        System.Threading.Tasks.Task<ApiResponse<PricingFull>> GetAccountSubaccountPricingAsyncWithHttpInfo (int? accountId, int? subaccountId, int? pricingId);
        /// <summary>
        /// Get a list of pricing plans for a subaccount.
        /// </summary>
        /// <remarks>
        /// Get a list of pricing plans for a subaccount. See Account Subaccount Pricing for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="subaccountId">Subaccount ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>Task of ListPricings</returns>
        System.Threading.Tasks.Task<ListPricings> ListAccountSubaccountPricingAsync (int? accountId, int? subaccountId, List<string> filtersId = null, string sortId = null, int? limit = null, int? offset = null, string fields = null);

        /// <summary>
        /// Get a list of pricing plans for a subaccount.
        /// </summary>
        /// <remarks>
        /// Get a list of pricing plans for a subaccount. See Account Subaccount Pricing for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="subaccountId">Subaccount ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>Task of ApiResponse (ListPricings)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListPricings>> ListAccountSubaccountPricingAsyncWithHttpInfo (int? accountId, int? subaccountId, List<string> filtersId = null, string sortId = null, int? limit = null, int? offset = null, string fields = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SubaccountpricingApi : ISubaccountpricingApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SubaccountpricingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SubaccountpricingApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubaccountpricingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SubaccountpricingApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add a pricing plan to a subaccount. Add a pricing plan to a subaccount. See Account Subaccount Pricing for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="subaccountId">Subaccount ID</param>
        /// <param name="data">Subaccount pricing data</param>
        /// <returns>PricingFull</returns>
        public PricingFull CreateAccountSubaccountPricing (int? accountId, int? subaccountId, CreatePricingParams data)
        {
             ApiResponse<PricingFull> localVarResponse = CreateAccountSubaccountPricingWithHttpInfo(accountId, subaccountId, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a pricing plan to a subaccount. Add a pricing plan to a subaccount. See Account Subaccount Pricing for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="subaccountId">Subaccount ID</param>
        /// <param name="data">Subaccount pricing data</param>
        /// <returns>ApiResponse of PricingFull</returns>
        public ApiResponse< PricingFull > CreateAccountSubaccountPricingWithHttpInfo (int? accountId, int? subaccountId, CreatePricingParams data)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling SubaccountpricingApi->CreateAccountSubaccountPricing");
            // verify the required parameter 'subaccountId' is set
            if (subaccountId == null)
                throw new ApiException(400, "Missing required parameter 'subaccountId' when calling SubaccountpricingApi->CreateAccountSubaccountPricing");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling SubaccountpricingApi->CreateAccountSubaccountPricing");

            var localVarPath = "/accounts/{account_id}/subaccounts/{subaccount_id}/pricing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (subaccountId != null) localVarPathParams.Add("subaccount_id", Configuration.ApiClient.ParameterToString(subaccountId)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAccountSubaccountPricing", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PricingFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PricingFull) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PricingFull)));
        }

        /// <summary>
        /// Add a pricing plan to a subaccount. Add a pricing plan to a subaccount. See Account Subaccount Pricing for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="subaccountId">Subaccount ID</param>
        /// <param name="data">Subaccount pricing data</param>
        /// <returns>Task of PricingFull</returns>
        public async System.Threading.Tasks.Task<PricingFull> CreateAccountSubaccountPricingAsync (int? accountId, int? subaccountId, CreatePricingParams data)
        {
             ApiResponse<PricingFull> localVarResponse = await CreateAccountSubaccountPricingAsyncWithHttpInfo(accountId, subaccountId, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a pricing plan to a subaccount. Add a pricing plan to a subaccount. See Account Subaccount Pricing for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="subaccountId">Subaccount ID</param>
        /// <param name="data">Subaccount pricing data</param>
        /// <returns>Task of ApiResponse (PricingFull)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PricingFull>> CreateAccountSubaccountPricingAsyncWithHttpInfo (int? accountId, int? subaccountId, CreatePricingParams data)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling SubaccountpricingApi->CreateAccountSubaccountPricing");
            // verify the required parameter 'subaccountId' is set
            if (subaccountId == null)
                throw new ApiException(400, "Missing required parameter 'subaccountId' when calling SubaccountpricingApi->CreateAccountSubaccountPricing");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling SubaccountpricingApi->CreateAccountSubaccountPricing");

            var localVarPath = "/accounts/{account_id}/subaccounts/{subaccount_id}/pricing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (subaccountId != null) localVarPathParams.Add("subaccount_id", Configuration.ApiClient.ParameterToString(subaccountId)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAccountSubaccountPricing", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PricingFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PricingFull) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PricingFull)));
        }

        /// <summary>
        /// Delete a pricing plan from a subaccount. Delete a pricing plan from a subaccount. See Account Subaccount Pricing for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="subaccountId">Subaccount ID</param>
        /// <param name="pricingId">Pricing Object ID</param>
        /// <returns>DeleteEntry</returns>
        public DeleteEntry DeleteAccountSubaccountPricing (int? accountId, int? subaccountId, int? pricingId)
        {
             ApiResponse<DeleteEntry> localVarResponse = DeleteAccountSubaccountPricingWithHttpInfo(accountId, subaccountId, pricingId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a pricing plan from a subaccount. Delete a pricing plan from a subaccount. See Account Subaccount Pricing for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="subaccountId">Subaccount ID</param>
        /// <param name="pricingId">Pricing Object ID</param>
        /// <returns>ApiResponse of DeleteEntry</returns>
        public ApiResponse< DeleteEntry > DeleteAccountSubaccountPricingWithHttpInfo (int? accountId, int? subaccountId, int? pricingId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling SubaccountpricingApi->DeleteAccountSubaccountPricing");
            // verify the required parameter 'subaccountId' is set
            if (subaccountId == null)
                throw new ApiException(400, "Missing required parameter 'subaccountId' when calling SubaccountpricingApi->DeleteAccountSubaccountPricing");
            // verify the required parameter 'pricingId' is set
            if (pricingId == null)
                throw new ApiException(400, "Missing required parameter 'pricingId' when calling SubaccountpricingApi->DeleteAccountSubaccountPricing");

            var localVarPath = "/accounts/{account_id}/subaccounts/{subaccount_id}/pricing/{pricing_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (subaccountId != null) localVarPathParams.Add("subaccount_id", Configuration.ApiClient.ParameterToString(subaccountId)); // path parameter
            if (pricingId != null) localVarPathParams.Add("pricing_id", Configuration.ApiClient.ParameterToString(pricingId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAccountSubaccountPricing", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteEntry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteEntry) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteEntry)));
        }

        /// <summary>
        /// Delete a pricing plan from a subaccount. Delete a pricing plan from a subaccount. See Account Subaccount Pricing for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="subaccountId">Subaccount ID</param>
        /// <param name="pricingId">Pricing Object ID</param>
        /// <returns>Task of DeleteEntry</returns>
        public async System.Threading.Tasks.Task<DeleteEntry> DeleteAccountSubaccountPricingAsync (int? accountId, int? subaccountId, int? pricingId)
        {
             ApiResponse<DeleteEntry> localVarResponse = await DeleteAccountSubaccountPricingAsyncWithHttpInfo(accountId, subaccountId, pricingId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a pricing plan from a subaccount. Delete a pricing plan from a subaccount. See Account Subaccount Pricing for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="subaccountId">Subaccount ID</param>
        /// <param name="pricingId">Pricing Object ID</param>
        /// <returns>Task of ApiResponse (DeleteEntry)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeleteEntry>> DeleteAccountSubaccountPricingAsyncWithHttpInfo (int? accountId, int? subaccountId, int? pricingId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling SubaccountpricingApi->DeleteAccountSubaccountPricing");
            // verify the required parameter 'subaccountId' is set
            if (subaccountId == null)
                throw new ApiException(400, "Missing required parameter 'subaccountId' when calling SubaccountpricingApi->DeleteAccountSubaccountPricing");
            // verify the required parameter 'pricingId' is set
            if (pricingId == null)
                throw new ApiException(400, "Missing required parameter 'pricingId' when calling SubaccountpricingApi->DeleteAccountSubaccountPricing");

            var localVarPath = "/accounts/{account_id}/subaccounts/{subaccount_id}/pricing/{pricing_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (subaccountId != null) localVarPathParams.Add("subaccount_id", Configuration.ApiClient.ParameterToString(subaccountId)); // path parameter
            if (pricingId != null) localVarPathParams.Add("pricing_id", Configuration.ApiClient.ParameterToString(pricingId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAccountSubaccountPricing", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteEntry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteEntry) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteEntry)));
        }

        /// <summary>
        /// Get the details of a pricing plan for a subaccount. Get the details of a pricing plan for a subaccount. See Account Subaccount Pricing for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="subaccountId">Subaccount ID</param>
        /// <param name="pricingId">Pricing Object ID</param>
        /// <returns>PricingFull</returns>
        public PricingFull GetAccountSubaccountPricing (int? accountId, int? subaccountId, int? pricingId)
        {
             ApiResponse<PricingFull> localVarResponse = GetAccountSubaccountPricingWithHttpInfo(accountId, subaccountId, pricingId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the details of a pricing plan for a subaccount. Get the details of a pricing plan for a subaccount. See Account Subaccount Pricing for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="subaccountId">Subaccount ID</param>
        /// <param name="pricingId">Pricing Object ID</param>
        /// <returns>ApiResponse of PricingFull</returns>
        public ApiResponse< PricingFull > GetAccountSubaccountPricingWithHttpInfo (int? accountId, int? subaccountId, int? pricingId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling SubaccountpricingApi->GetAccountSubaccountPricing");
            // verify the required parameter 'subaccountId' is set
            if (subaccountId == null)
                throw new ApiException(400, "Missing required parameter 'subaccountId' when calling SubaccountpricingApi->GetAccountSubaccountPricing");
            // verify the required parameter 'pricingId' is set
            if (pricingId == null)
                throw new ApiException(400, "Missing required parameter 'pricingId' when calling SubaccountpricingApi->GetAccountSubaccountPricing");

            var localVarPath = "/accounts/{account_id}/subaccounts/{subaccount_id}/pricing/{pricing_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (subaccountId != null) localVarPathParams.Add("subaccount_id", Configuration.ApiClient.ParameterToString(subaccountId)); // path parameter
            if (pricingId != null) localVarPathParams.Add("pricing_id", Configuration.ApiClient.ParameterToString(pricingId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountSubaccountPricing", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PricingFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PricingFull) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PricingFull)));
        }

        /// <summary>
        /// Get the details of a pricing plan for a subaccount. Get the details of a pricing plan for a subaccount. See Account Subaccount Pricing for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="subaccountId">Subaccount ID</param>
        /// <param name="pricingId">Pricing Object ID</param>
        /// <returns>Task of PricingFull</returns>
        public async System.Threading.Tasks.Task<PricingFull> GetAccountSubaccountPricingAsync (int? accountId, int? subaccountId, int? pricingId)
        {
             ApiResponse<PricingFull> localVarResponse = await GetAccountSubaccountPricingAsyncWithHttpInfo(accountId, subaccountId, pricingId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the details of a pricing plan for a subaccount. Get the details of a pricing plan for a subaccount. See Account Subaccount Pricing for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="subaccountId">Subaccount ID</param>
        /// <param name="pricingId">Pricing Object ID</param>
        /// <returns>Task of ApiResponse (PricingFull)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PricingFull>> GetAccountSubaccountPricingAsyncWithHttpInfo (int? accountId, int? subaccountId, int? pricingId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling SubaccountpricingApi->GetAccountSubaccountPricing");
            // verify the required parameter 'subaccountId' is set
            if (subaccountId == null)
                throw new ApiException(400, "Missing required parameter 'subaccountId' when calling SubaccountpricingApi->GetAccountSubaccountPricing");
            // verify the required parameter 'pricingId' is set
            if (pricingId == null)
                throw new ApiException(400, "Missing required parameter 'pricingId' when calling SubaccountpricingApi->GetAccountSubaccountPricing");

            var localVarPath = "/accounts/{account_id}/subaccounts/{subaccount_id}/pricing/{pricing_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (subaccountId != null) localVarPathParams.Add("subaccount_id", Configuration.ApiClient.ParameterToString(subaccountId)); // path parameter
            if (pricingId != null) localVarPathParams.Add("pricing_id", Configuration.ApiClient.ParameterToString(pricingId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountSubaccountPricing", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PricingFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PricingFull) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PricingFull)));
        }

        /// <summary>
        /// Get a list of pricing plans for a subaccount. Get a list of pricing plans for a subaccount. See Account Subaccount Pricing for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="subaccountId">Subaccount ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>ListPricings</returns>
        public ListPricings ListAccountSubaccountPricing (int? accountId, int? subaccountId, List<string> filtersId = null, string sortId = null, int? limit = null, int? offset = null, string fields = null)
        {
             ApiResponse<ListPricings> localVarResponse = ListAccountSubaccountPricingWithHttpInfo(accountId, subaccountId, filtersId, sortId, limit, offset, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of pricing plans for a subaccount. Get a list of pricing plans for a subaccount. See Account Subaccount Pricing for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="subaccountId">Subaccount ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>ApiResponse of ListPricings</returns>
        public ApiResponse< ListPricings > ListAccountSubaccountPricingWithHttpInfo (int? accountId, int? subaccountId, List<string> filtersId = null, string sortId = null, int? limit = null, int? offset = null, string fields = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling SubaccountpricingApi->ListAccountSubaccountPricing");
            // verify the required parameter 'subaccountId' is set
            if (subaccountId == null)
                throw new ApiException(400, "Missing required parameter 'subaccountId' when calling SubaccountpricingApi->ListAccountSubaccountPricing");

            var localVarPath = "/accounts/{account_id}/subaccounts/{subaccount_id}/pricing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (subaccountId != null) localVarPathParams.Add("subaccount_id", Configuration.ApiClient.ParameterToString(subaccountId)); // path parameter
            if (filtersId != null) localVarQueryParams.Add("filters[id]", Configuration.ApiClient.ParameterToString(filtersId)); // query parameter
            if (sortId != null) localVarQueryParams.Add("sort[id]", Configuration.ApiClient.ParameterToString(sortId)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAccountSubaccountPricing", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListPricings>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListPricings) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListPricings)));
        }

        /// <summary>
        /// Get a list of pricing plans for a subaccount. Get a list of pricing plans for a subaccount. See Account Subaccount Pricing for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="subaccountId">Subaccount ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>Task of ListPricings</returns>
        public async System.Threading.Tasks.Task<ListPricings> ListAccountSubaccountPricingAsync (int? accountId, int? subaccountId, List<string> filtersId = null, string sortId = null, int? limit = null, int? offset = null, string fields = null)
        {
             ApiResponse<ListPricings> localVarResponse = await ListAccountSubaccountPricingAsyncWithHttpInfo(accountId, subaccountId, filtersId, sortId, limit, offset, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of pricing plans for a subaccount. Get a list of pricing plans for a subaccount. See Account Subaccount Pricing for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="subaccountId">Subaccount ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>Task of ApiResponse (ListPricings)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListPricings>> ListAccountSubaccountPricingAsyncWithHttpInfo (int? accountId, int? subaccountId, List<string> filtersId = null, string sortId = null, int? limit = null, int? offset = null, string fields = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling SubaccountpricingApi->ListAccountSubaccountPricing");
            // verify the required parameter 'subaccountId' is set
            if (subaccountId == null)
                throw new ApiException(400, "Missing required parameter 'subaccountId' when calling SubaccountpricingApi->ListAccountSubaccountPricing");

            var localVarPath = "/accounts/{account_id}/subaccounts/{subaccount_id}/pricing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (subaccountId != null) localVarPathParams.Add("subaccount_id", Configuration.ApiClient.ParameterToString(subaccountId)); // path parameter
            if (filtersId != null) localVarQueryParams.Add("filters[id]", Configuration.ApiClient.ParameterToString(filtersId)); // query parameter
            if (sortId != null) localVarQueryParams.Add("sort[id]", Configuration.ApiClient.ParameterToString(sortId)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAccountSubaccountPricing", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListPricings>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListPricings) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListPricings)));
        }

    }
}
