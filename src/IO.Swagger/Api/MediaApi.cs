/* 
 * Phone.com API
 *
 * This is a Phone.com api Swagger definition
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apisupport@phone.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMediaApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a media object to your account that can be used as a greeting or hold music. Users may create a media by using the built-in Text-to-speech (TTS) facility or upload a file of their choice. (Note: The maximum size for media files or JSON objects included with a POST or PUT request is 10 MB)
        /// </summary>
        /// <remarks>
        /// See Account Media for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="json">Media extra parameters (optional)</param>
        /// <param name="file">Media file (optional)</param>
        /// <returns>MediaFull</returns>
        MediaFull CreateAccountMediaFiles (int? accountId, string json = null, System.IO.Stream file = null);

        /// <summary>
        /// Add a media object to your account that can be used as a greeting or hold music. Users may create a media by using the built-in Text-to-speech (TTS) facility or upload a file of their choice. (Note: The maximum size for media files or JSON objects included with a POST or PUT request is 10 MB)
        /// </summary>
        /// <remarks>
        /// See Account Media for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="json">Media extra parameters (optional)</param>
        /// <param name="file">Media file (optional)</param>
        /// <returns>ApiResponse of MediaFull</returns>
        ApiResponse<MediaFull> CreateAccountMediaFilesWithHttpInfo (int? accountId, string json = null, System.IO.Stream file = null);
        /// <summary>
        /// Add a media object to your account that can be used as a greeting or hold music. Users may create a media by using the built-in Text-to-speech (TTS) facility or upload a file of their choice. (Note: The maximum size for media files or JSON objects included with a POST or PUT request is 10 MB)
        /// </summary>
        /// <remarks>
        /// See Account Media for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="data">Media data (optional)</param>
        /// <returns>MediaFull</returns>
        MediaFull CreateAccountMediaTts (int? accountId, CreateMediaParams data = null);

        /// <summary>
        /// Add a media object to your account that can be used as a greeting or hold music. Users may create a media by using the built-in Text-to-speech (TTS) facility or upload a file of their choice. (Note: The maximum size for media files or JSON objects included with a POST or PUT request is 10 MB)
        /// </summary>
        /// <remarks>
        /// See Account Media for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="data">Media data (optional)</param>
        /// <returns>ApiResponse of MediaFull</returns>
        ApiResponse<MediaFull> CreateAccountMediaTtsWithHttpInfo (int? accountId, CreateMediaParams data = null);
        /// <summary>
        /// Delete an individual media record
        /// </summary>
        /// <remarks>
        /// See Account Media for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="mediaId">Media ID</param>
        /// <returns>DeleteEntry</returns>
        DeleteEntry DeleteAccountMedia (int? accountId, int? mediaId);

        /// <summary>
        /// Delete an individual media record
        /// </summary>
        /// <remarks>
        /// See Account Media for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="mediaId">Media ID</param>
        /// <returns>ApiResponse of DeleteEntry</returns>
        ApiResponse<DeleteEntry> DeleteAccountMediaWithHttpInfo (int? accountId, int? mediaId);
        /// <summary>
        /// Show details of an individual media recording (Greeting or Hold Music)
        /// </summary>
        /// <remarks>
        /// Get individual media recording
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="mediaId">Media ID</param>
        /// <returns>MediaFull</returns>
        MediaFull GetAccountMedia (int? accountId, int? mediaId);

        /// <summary>
        /// Show details of an individual media recording (Greeting or Hold Music)
        /// </summary>
        /// <remarks>
        /// Get individual media recording
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="mediaId">Media ID</param>
        /// <returns>ApiResponse of MediaFull</returns>
        ApiResponse<MediaFull> GetAccountMediaWithHttpInfo (int? accountId, int? mediaId);
        /// <summary>
        /// Get a list of media recordings for an account.
        /// </summary>
        /// <remarks>
        /// Get a list of media recordings for an account. See Account Media for more info on the properties. Note: This API is for users with Account Owner scope access token. Users with Extension User scope token should invoke the Extension level List Media API with the following definition: GET https://api.phone.com/v4/accounts/:account_id/extensions/:extension_id/media
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="filtersName">Name filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="sortName">Name sorting (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>ListMedia</returns>
        ListMedia ListAccountMedia (int? accountId, List<string> filtersId = null, List<string> filtersName = null, string sortId = null, string sortName = null, int? limit = null, int? offset = null, string fields = null);

        /// <summary>
        /// Get a list of media recordings for an account.
        /// </summary>
        /// <remarks>
        /// Get a list of media recordings for an account. See Account Media for more info on the properties. Note: This API is for users with Account Owner scope access token. Users with Extension User scope token should invoke the Extension level List Media API with the following definition: GET https://api.phone.com/v4/accounts/:account_id/extensions/:extension_id/media
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="filtersName">Name filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="sortName">Name sorting (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>ApiResponse of ListMedia</returns>
        ApiResponse<ListMedia> ListAccountMediaWithHttpInfo (int? accountId, List<string> filtersId = null, List<string> filtersName = null, string sortId = null, string sortName = null, int? limit = null, int? offset = null, string fields = null);
        /// <summary>
        /// Update a media object to your account. Note: The maximum size for media files or JSON objects included with a POST or PUT request is 10 MB.
        /// </summary>
        /// <remarks>
        /// See Account Media for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="mediaId">Media ID</param>
        /// <param name="json">Media extra parameters (optional)</param>
        /// <param name="file">Media file (optional)</param>
        /// <returns>MediaFull</returns>
        MediaFull ReplaceAccountMediaFiles (int? accountId, int? mediaId, string json = null, System.IO.Stream file = null);

        /// <summary>
        /// Update a media object to your account. Note: The maximum size for media files or JSON objects included with a POST or PUT request is 10 MB.
        /// </summary>
        /// <remarks>
        /// See Account Media for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="mediaId">Media ID</param>
        /// <param name="json">Media extra parameters (optional)</param>
        /// <param name="file">Media file (optional)</param>
        /// <returns>ApiResponse of MediaFull</returns>
        ApiResponse<MediaFull> ReplaceAccountMediaFilesWithHttpInfo (int? accountId, int? mediaId, string json = null, System.IO.Stream file = null);
        /// <summary>
        /// Update a media object to your account.
        /// </summary>
        /// <remarks>
        /// Update a media object to your account. Note: The maximum size for media files or JSON objects included with a POST or PUT request is 10 MB. See Account Media for more info on the properties. Note: This API is for users with Account Owner scope access token. Users with Extension User scope token should invoke the Extension level Replace Media API with the following definition: PUT https://api.phone.com/v4/accounts/:account_id/extensions/:extension_id/media/:media_id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="mediaId">Media ID</param>
        /// <param name="data">Media data (optional)</param>
        /// <returns>MediaFull</returns>
        MediaFull ReplaceAccountMediaTts (int? accountId, int? mediaId, CreateMediaParams data = null);

        /// <summary>
        /// Update a media object to your account.
        /// </summary>
        /// <remarks>
        /// Update a media object to your account. Note: The maximum size for media files or JSON objects included with a POST or PUT request is 10 MB. See Account Media for more info on the properties. Note: This API is for users with Account Owner scope access token. Users with Extension User scope token should invoke the Extension level Replace Media API with the following definition: PUT https://api.phone.com/v4/accounts/:account_id/extensions/:extension_id/media/:media_id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="mediaId">Media ID</param>
        /// <param name="data">Media data (optional)</param>
        /// <returns>ApiResponse of MediaFull</returns>
        ApiResponse<MediaFull> ReplaceAccountMediaTtsWithHttpInfo (int? accountId, int? mediaId, CreateMediaParams data = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add a media object to your account that can be used as a greeting or hold music. Users may create a media by using the built-in Text-to-speech (TTS) facility or upload a file of their choice. (Note: The maximum size for media files or JSON objects included with a POST or PUT request is 10 MB)
        /// </summary>
        /// <remarks>
        /// See Account Media for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="json">Media extra parameters (optional)</param>
        /// <param name="file">Media file (optional)</param>
        /// <returns>Task of MediaFull</returns>
        System.Threading.Tasks.Task<MediaFull> CreateAccountMediaFilesAsync (int? accountId, string json = null, System.IO.Stream file = null);

        /// <summary>
        /// Add a media object to your account that can be used as a greeting or hold music. Users may create a media by using the built-in Text-to-speech (TTS) facility or upload a file of their choice. (Note: The maximum size for media files or JSON objects included with a POST or PUT request is 10 MB)
        /// </summary>
        /// <remarks>
        /// See Account Media for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="json">Media extra parameters (optional)</param>
        /// <param name="file">Media file (optional)</param>
        /// <returns>Task of ApiResponse (MediaFull)</returns>
        System.Threading.Tasks.Task<ApiResponse<MediaFull>> CreateAccountMediaFilesAsyncWithHttpInfo (int? accountId, string json = null, System.IO.Stream file = null);
        /// <summary>
        /// Add a media object to your account that can be used as a greeting or hold music. Users may create a media by using the built-in Text-to-speech (TTS) facility or upload a file of their choice. (Note: The maximum size for media files or JSON objects included with a POST or PUT request is 10 MB)
        /// </summary>
        /// <remarks>
        /// See Account Media for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="data">Media data (optional)</param>
        /// <returns>Task of MediaFull</returns>
        System.Threading.Tasks.Task<MediaFull> CreateAccountMediaTtsAsync (int? accountId, CreateMediaParams data = null);

        /// <summary>
        /// Add a media object to your account that can be used as a greeting or hold music. Users may create a media by using the built-in Text-to-speech (TTS) facility or upload a file of their choice. (Note: The maximum size for media files or JSON objects included with a POST or PUT request is 10 MB)
        /// </summary>
        /// <remarks>
        /// See Account Media for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="data">Media data (optional)</param>
        /// <returns>Task of ApiResponse (MediaFull)</returns>
        System.Threading.Tasks.Task<ApiResponse<MediaFull>> CreateAccountMediaTtsAsyncWithHttpInfo (int? accountId, CreateMediaParams data = null);
        /// <summary>
        /// Delete an individual media record
        /// </summary>
        /// <remarks>
        /// See Account Media for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="mediaId">Media ID</param>
        /// <returns>Task of DeleteEntry</returns>
        System.Threading.Tasks.Task<DeleteEntry> DeleteAccountMediaAsync (int? accountId, int? mediaId);

        /// <summary>
        /// Delete an individual media record
        /// </summary>
        /// <remarks>
        /// See Account Media for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="mediaId">Media ID</param>
        /// <returns>Task of ApiResponse (DeleteEntry)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteEntry>> DeleteAccountMediaAsyncWithHttpInfo (int? accountId, int? mediaId);
        /// <summary>
        /// Show details of an individual media recording (Greeting or Hold Music)
        /// </summary>
        /// <remarks>
        /// Get individual media recording
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="mediaId">Media ID</param>
        /// <returns>Task of MediaFull</returns>
        System.Threading.Tasks.Task<MediaFull> GetAccountMediaAsync (int? accountId, int? mediaId);

        /// <summary>
        /// Show details of an individual media recording (Greeting or Hold Music)
        /// </summary>
        /// <remarks>
        /// Get individual media recording
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="mediaId">Media ID</param>
        /// <returns>Task of ApiResponse (MediaFull)</returns>
        System.Threading.Tasks.Task<ApiResponse<MediaFull>> GetAccountMediaAsyncWithHttpInfo (int? accountId, int? mediaId);
        /// <summary>
        /// Get a list of media recordings for an account.
        /// </summary>
        /// <remarks>
        /// Get a list of media recordings for an account. See Account Media for more info on the properties. Note: This API is for users with Account Owner scope access token. Users with Extension User scope token should invoke the Extension level List Media API with the following definition: GET https://api.phone.com/v4/accounts/:account_id/extensions/:extension_id/media
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="filtersName">Name filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="sortName">Name sorting (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>Task of ListMedia</returns>
        System.Threading.Tasks.Task<ListMedia> ListAccountMediaAsync (int? accountId, List<string> filtersId = null, List<string> filtersName = null, string sortId = null, string sortName = null, int? limit = null, int? offset = null, string fields = null);

        /// <summary>
        /// Get a list of media recordings for an account.
        /// </summary>
        /// <remarks>
        /// Get a list of media recordings for an account. See Account Media for more info on the properties. Note: This API is for users with Account Owner scope access token. Users with Extension User scope token should invoke the Extension level List Media API with the following definition: GET https://api.phone.com/v4/accounts/:account_id/extensions/:extension_id/media
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="filtersName">Name filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="sortName">Name sorting (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>Task of ApiResponse (ListMedia)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListMedia>> ListAccountMediaAsyncWithHttpInfo (int? accountId, List<string> filtersId = null, List<string> filtersName = null, string sortId = null, string sortName = null, int? limit = null, int? offset = null, string fields = null);
        /// <summary>
        /// Update a media object to your account. Note: The maximum size for media files or JSON objects included with a POST or PUT request is 10 MB.
        /// </summary>
        /// <remarks>
        /// See Account Media for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="mediaId">Media ID</param>
        /// <param name="json">Media extra parameters (optional)</param>
        /// <param name="file">Media file (optional)</param>
        /// <returns>Task of MediaFull</returns>
        System.Threading.Tasks.Task<MediaFull> ReplaceAccountMediaFilesAsync (int? accountId, int? mediaId, string json = null, System.IO.Stream file = null);

        /// <summary>
        /// Update a media object to your account. Note: The maximum size for media files or JSON objects included with a POST or PUT request is 10 MB.
        /// </summary>
        /// <remarks>
        /// See Account Media for more info on the properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="mediaId">Media ID</param>
        /// <param name="json">Media extra parameters (optional)</param>
        /// <param name="file">Media file (optional)</param>
        /// <returns>Task of ApiResponse (MediaFull)</returns>
        System.Threading.Tasks.Task<ApiResponse<MediaFull>> ReplaceAccountMediaFilesAsyncWithHttpInfo (int? accountId, int? mediaId, string json = null, System.IO.Stream file = null);
        /// <summary>
        /// Update a media object to your account.
        /// </summary>
        /// <remarks>
        /// Update a media object to your account. Note: The maximum size for media files or JSON objects included with a POST or PUT request is 10 MB. See Account Media for more info on the properties. Note: This API is for users with Account Owner scope access token. Users with Extension User scope token should invoke the Extension level Replace Media API with the following definition: PUT https://api.phone.com/v4/accounts/:account_id/extensions/:extension_id/media/:media_id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="mediaId">Media ID</param>
        /// <param name="data">Media data (optional)</param>
        /// <returns>Task of MediaFull</returns>
        System.Threading.Tasks.Task<MediaFull> ReplaceAccountMediaTtsAsync (int? accountId, int? mediaId, CreateMediaParams data = null);

        /// <summary>
        /// Update a media object to your account.
        /// </summary>
        /// <remarks>
        /// Update a media object to your account. Note: The maximum size for media files or JSON objects included with a POST or PUT request is 10 MB. See Account Media for more info on the properties. Note: This API is for users with Account Owner scope access token. Users with Extension User scope token should invoke the Extension level Replace Media API with the following definition: PUT https://api.phone.com/v4/accounts/:account_id/extensions/:extension_id/media/:media_id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="mediaId">Media ID</param>
        /// <param name="data">Media data (optional)</param>
        /// <returns>Task of ApiResponse (MediaFull)</returns>
        System.Threading.Tasks.Task<ApiResponse<MediaFull>> ReplaceAccountMediaTtsAsyncWithHttpInfo (int? accountId, int? mediaId, CreateMediaParams data = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MediaApi : IMediaApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MediaApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MediaApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MediaApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MediaApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add a media object to your account that can be used as a greeting or hold music. Users may create a media by using the built-in Text-to-speech (TTS) facility or upload a file of their choice. (Note: The maximum size for media files or JSON objects included with a POST or PUT request is 10 MB) See Account Media for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="json">Media extra parameters (optional)</param>
        /// <param name="file">Media file (optional)</param>
        /// <returns>MediaFull</returns>
        public MediaFull CreateAccountMediaFiles (int? accountId, string json = null, System.IO.Stream file = null)
        {
             ApiResponse<MediaFull> localVarResponse = CreateAccountMediaFilesWithHttpInfo(accountId, json, file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a media object to your account that can be used as a greeting or hold music. Users may create a media by using the built-in Text-to-speech (TTS) facility or upload a file of their choice. (Note: The maximum size for media files or JSON objects included with a POST or PUT request is 10 MB) See Account Media for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="json">Media extra parameters (optional)</param>
        /// <param name="file">Media file (optional)</param>
        /// <returns>ApiResponse of MediaFull</returns>
        public ApiResponse< MediaFull > CreateAccountMediaFilesWithHttpInfo (int? accountId, string json = null, System.IO.Stream file = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MediaApi->CreateAccountMediaFiles");

            var localVarPath = "/accounts/{account_id}/media/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (json != null) localVarFormParams.Add("json", Configuration.ApiClient.ParameterToString(json)); // form parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAccountMediaFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MediaFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MediaFull) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MediaFull)));
        }

        /// <summary>
        /// Add a media object to your account that can be used as a greeting or hold music. Users may create a media by using the built-in Text-to-speech (TTS) facility or upload a file of their choice. (Note: The maximum size for media files or JSON objects included with a POST or PUT request is 10 MB) See Account Media for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="json">Media extra parameters (optional)</param>
        /// <param name="file">Media file (optional)</param>
        /// <returns>Task of MediaFull</returns>
        public async System.Threading.Tasks.Task<MediaFull> CreateAccountMediaFilesAsync (int? accountId, string json = null, System.IO.Stream file = null)
        {
             ApiResponse<MediaFull> localVarResponse = await CreateAccountMediaFilesAsyncWithHttpInfo(accountId, json, file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a media object to your account that can be used as a greeting or hold music. Users may create a media by using the built-in Text-to-speech (TTS) facility or upload a file of their choice. (Note: The maximum size for media files or JSON objects included with a POST or PUT request is 10 MB) See Account Media for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="json">Media extra parameters (optional)</param>
        /// <param name="file">Media file (optional)</param>
        /// <returns>Task of ApiResponse (MediaFull)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MediaFull>> CreateAccountMediaFilesAsyncWithHttpInfo (int? accountId, string json = null, System.IO.Stream file = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MediaApi->CreateAccountMediaFiles");

            var localVarPath = "/accounts/{account_id}/media/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (json != null) localVarFormParams.Add("json", Configuration.ApiClient.ParameterToString(json)); // form parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAccountMediaFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MediaFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MediaFull) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MediaFull)));
        }

        /// <summary>
        /// Add a media object to your account that can be used as a greeting or hold music. Users may create a media by using the built-in Text-to-speech (TTS) facility or upload a file of their choice. (Note: The maximum size for media files or JSON objects included with a POST or PUT request is 10 MB) See Account Media for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="data">Media data (optional)</param>
        /// <returns>MediaFull</returns>
        public MediaFull CreateAccountMediaTts (int? accountId, CreateMediaParams data = null)
        {
             ApiResponse<MediaFull> localVarResponse = CreateAccountMediaTtsWithHttpInfo(accountId, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a media object to your account that can be used as a greeting or hold music. Users may create a media by using the built-in Text-to-speech (TTS) facility or upload a file of their choice. (Note: The maximum size for media files or JSON objects included with a POST or PUT request is 10 MB) See Account Media for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="data">Media data (optional)</param>
        /// <returns>ApiResponse of MediaFull</returns>
        public ApiResponse< MediaFull > CreateAccountMediaTtsWithHttpInfo (int? accountId, CreateMediaParams data = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MediaApi->CreateAccountMediaTts");

            var localVarPath = "/accounts/{account_id}/media/tts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAccountMediaTts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MediaFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MediaFull) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MediaFull)));
        }

        /// <summary>
        /// Add a media object to your account that can be used as a greeting or hold music. Users may create a media by using the built-in Text-to-speech (TTS) facility or upload a file of their choice. (Note: The maximum size for media files or JSON objects included with a POST or PUT request is 10 MB) See Account Media for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="data">Media data (optional)</param>
        /// <returns>Task of MediaFull</returns>
        public async System.Threading.Tasks.Task<MediaFull> CreateAccountMediaTtsAsync (int? accountId, CreateMediaParams data = null)
        {
             ApiResponse<MediaFull> localVarResponse = await CreateAccountMediaTtsAsyncWithHttpInfo(accountId, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a media object to your account that can be used as a greeting or hold music. Users may create a media by using the built-in Text-to-speech (TTS) facility or upload a file of their choice. (Note: The maximum size for media files or JSON objects included with a POST or PUT request is 10 MB) See Account Media for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="data">Media data (optional)</param>
        /// <returns>Task of ApiResponse (MediaFull)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MediaFull>> CreateAccountMediaTtsAsyncWithHttpInfo (int? accountId, CreateMediaParams data = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MediaApi->CreateAccountMediaTts");

            var localVarPath = "/accounts/{account_id}/media/tts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAccountMediaTts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MediaFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MediaFull) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MediaFull)));
        }

        /// <summary>
        /// Delete an individual media record See Account Media for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="mediaId">Media ID</param>
        /// <returns>DeleteEntry</returns>
        public DeleteEntry DeleteAccountMedia (int? accountId, int? mediaId)
        {
             ApiResponse<DeleteEntry> localVarResponse = DeleteAccountMediaWithHttpInfo(accountId, mediaId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an individual media record See Account Media for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="mediaId">Media ID</param>
        /// <returns>ApiResponse of DeleteEntry</returns>
        public ApiResponse< DeleteEntry > DeleteAccountMediaWithHttpInfo (int? accountId, int? mediaId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MediaApi->DeleteAccountMedia");
            // verify the required parameter 'mediaId' is set
            if (mediaId == null)
                throw new ApiException(400, "Missing required parameter 'mediaId' when calling MediaApi->DeleteAccountMedia");

            var localVarPath = "/accounts/{account_id}/media/{media_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (mediaId != null) localVarPathParams.Add("media_id", Configuration.ApiClient.ParameterToString(mediaId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAccountMedia", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteEntry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteEntry) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteEntry)));
        }

        /// <summary>
        /// Delete an individual media record See Account Media for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="mediaId">Media ID</param>
        /// <returns>Task of DeleteEntry</returns>
        public async System.Threading.Tasks.Task<DeleteEntry> DeleteAccountMediaAsync (int? accountId, int? mediaId)
        {
             ApiResponse<DeleteEntry> localVarResponse = await DeleteAccountMediaAsyncWithHttpInfo(accountId, mediaId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete an individual media record See Account Media for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="mediaId">Media ID</param>
        /// <returns>Task of ApiResponse (DeleteEntry)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeleteEntry>> DeleteAccountMediaAsyncWithHttpInfo (int? accountId, int? mediaId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MediaApi->DeleteAccountMedia");
            // verify the required parameter 'mediaId' is set
            if (mediaId == null)
                throw new ApiException(400, "Missing required parameter 'mediaId' when calling MediaApi->DeleteAccountMedia");

            var localVarPath = "/accounts/{account_id}/media/{media_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (mediaId != null) localVarPathParams.Add("media_id", Configuration.ApiClient.ParameterToString(mediaId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAccountMedia", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteEntry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteEntry) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteEntry)));
        }

        /// <summary>
        /// Show details of an individual media recording (Greeting or Hold Music) Get individual media recording
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="mediaId">Media ID</param>
        /// <returns>MediaFull</returns>
        public MediaFull GetAccountMedia (int? accountId, int? mediaId)
        {
             ApiResponse<MediaFull> localVarResponse = GetAccountMediaWithHttpInfo(accountId, mediaId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Show details of an individual media recording (Greeting or Hold Music) Get individual media recording
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="mediaId">Media ID</param>
        /// <returns>ApiResponse of MediaFull</returns>
        public ApiResponse< MediaFull > GetAccountMediaWithHttpInfo (int? accountId, int? mediaId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MediaApi->GetAccountMedia");
            // verify the required parameter 'mediaId' is set
            if (mediaId == null)
                throw new ApiException(400, "Missing required parameter 'mediaId' when calling MediaApi->GetAccountMedia");

            var localVarPath = "/accounts/{account_id}/media/{media_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (mediaId != null) localVarPathParams.Add("media_id", Configuration.ApiClient.ParameterToString(mediaId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountMedia", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MediaFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MediaFull) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MediaFull)));
        }

        /// <summary>
        /// Show details of an individual media recording (Greeting or Hold Music) Get individual media recording
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="mediaId">Media ID</param>
        /// <returns>Task of MediaFull</returns>
        public async System.Threading.Tasks.Task<MediaFull> GetAccountMediaAsync (int? accountId, int? mediaId)
        {
             ApiResponse<MediaFull> localVarResponse = await GetAccountMediaAsyncWithHttpInfo(accountId, mediaId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Show details of an individual media recording (Greeting or Hold Music) Get individual media recording
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="mediaId">Media ID</param>
        /// <returns>Task of ApiResponse (MediaFull)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MediaFull>> GetAccountMediaAsyncWithHttpInfo (int? accountId, int? mediaId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MediaApi->GetAccountMedia");
            // verify the required parameter 'mediaId' is set
            if (mediaId == null)
                throw new ApiException(400, "Missing required parameter 'mediaId' when calling MediaApi->GetAccountMedia");

            var localVarPath = "/accounts/{account_id}/media/{media_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (mediaId != null) localVarPathParams.Add("media_id", Configuration.ApiClient.ParameterToString(mediaId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountMedia", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MediaFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MediaFull) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MediaFull)));
        }

        /// <summary>
        /// Get a list of media recordings for an account. Get a list of media recordings for an account. See Account Media for more info on the properties. Note: This API is for users with Account Owner scope access token. Users with Extension User scope token should invoke the Extension level List Media API with the following definition: GET https://api.phone.com/v4/accounts/:account_id/extensions/:extension_id/media
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="filtersName">Name filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="sortName">Name sorting (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>ListMedia</returns>
        public ListMedia ListAccountMedia (int? accountId, List<string> filtersId = null, List<string> filtersName = null, string sortId = null, string sortName = null, int? limit = null, int? offset = null, string fields = null)
        {
             ApiResponse<ListMedia> localVarResponse = ListAccountMediaWithHttpInfo(accountId, filtersId, filtersName, sortId, sortName, limit, offset, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of media recordings for an account. Get a list of media recordings for an account. See Account Media for more info on the properties. Note: This API is for users with Account Owner scope access token. Users with Extension User scope token should invoke the Extension level List Media API with the following definition: GET https://api.phone.com/v4/accounts/:account_id/extensions/:extension_id/media
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="filtersName">Name filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="sortName">Name sorting (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>ApiResponse of ListMedia</returns>
        public ApiResponse< ListMedia > ListAccountMediaWithHttpInfo (int? accountId, List<string> filtersId = null, List<string> filtersName = null, string sortId = null, string sortName = null, int? limit = null, int? offset = null, string fields = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MediaApi->ListAccountMedia");

            var localVarPath = "/accounts/{account_id}/media";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (filtersId != null) localVarQueryParams.Add("filters[id]", Configuration.ApiClient.ParameterToString(filtersId)); // query parameter
            if (filtersName != null) localVarQueryParams.Add("filters[name]", Configuration.ApiClient.ParameterToString(filtersName)); // query parameter
            if (sortId != null) localVarQueryParams.Add("sort[id]", Configuration.ApiClient.ParameterToString(sortId)); // query parameter
            if (sortName != null) localVarQueryParams.Add("sort[name]", Configuration.ApiClient.ParameterToString(sortName)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAccountMedia", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListMedia>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListMedia) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListMedia)));
        }

        /// <summary>
        /// Get a list of media recordings for an account. Get a list of media recordings for an account. See Account Media for more info on the properties. Note: This API is for users with Account Owner scope access token. Users with Extension User scope token should invoke the Extension level List Media API with the following definition: GET https://api.phone.com/v4/accounts/:account_id/extensions/:extension_id/media
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="filtersName">Name filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="sortName">Name sorting (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>Task of ListMedia</returns>
        public async System.Threading.Tasks.Task<ListMedia> ListAccountMediaAsync (int? accountId, List<string> filtersId = null, List<string> filtersName = null, string sortId = null, string sortName = null, int? limit = null, int? offset = null, string fields = null)
        {
             ApiResponse<ListMedia> localVarResponse = await ListAccountMediaAsyncWithHttpInfo(accountId, filtersId, filtersName, sortId, sortName, limit, offset, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of media recordings for an account. Get a list of media recordings for an account. See Account Media for more info on the properties. Note: This API is for users with Account Owner scope access token. Users with Extension User scope token should invoke the Extension level List Media API with the following definition: GET https://api.phone.com/v4/accounts/:account_id/extensions/:extension_id/media
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="filtersId">ID filter (optional)</param>
        /// <param name="filtersName">Name filter (optional)</param>
        /// <param name="sortId">ID sorting (optional)</param>
        /// <param name="sortName">Name sorting (optional)</param>
        /// <param name="limit">Max results (optional)</param>
        /// <param name="offset">Results to skip (optional)</param>
        /// <param name="fields">Field set (optional)</param>
        /// <returns>Task of ApiResponse (ListMedia)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListMedia>> ListAccountMediaAsyncWithHttpInfo (int? accountId, List<string> filtersId = null, List<string> filtersName = null, string sortId = null, string sortName = null, int? limit = null, int? offset = null, string fields = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MediaApi->ListAccountMedia");

            var localVarPath = "/accounts/{account_id}/media";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (filtersId != null) localVarQueryParams.Add("filters[id]", Configuration.ApiClient.ParameterToString(filtersId)); // query parameter
            if (filtersName != null) localVarQueryParams.Add("filters[name]", Configuration.ApiClient.ParameterToString(filtersName)); // query parameter
            if (sortId != null) localVarQueryParams.Add("sort[id]", Configuration.ApiClient.ParameterToString(sortId)); // query parameter
            if (sortName != null) localVarQueryParams.Add("sort[name]", Configuration.ApiClient.ParameterToString(sortName)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAccountMedia", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListMedia>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListMedia) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListMedia)));
        }

        /// <summary>
        /// Update a media object to your account. Note: The maximum size for media files or JSON objects included with a POST or PUT request is 10 MB. See Account Media for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="mediaId">Media ID</param>
        /// <param name="json">Media extra parameters (optional)</param>
        /// <param name="file">Media file (optional)</param>
        /// <returns>MediaFull</returns>
        public MediaFull ReplaceAccountMediaFiles (int? accountId, int? mediaId, string json = null, System.IO.Stream file = null)
        {
             ApiResponse<MediaFull> localVarResponse = ReplaceAccountMediaFilesWithHttpInfo(accountId, mediaId, json, file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a media object to your account. Note: The maximum size for media files or JSON objects included with a POST or PUT request is 10 MB. See Account Media for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="mediaId">Media ID</param>
        /// <param name="json">Media extra parameters (optional)</param>
        /// <param name="file">Media file (optional)</param>
        /// <returns>ApiResponse of MediaFull</returns>
        public ApiResponse< MediaFull > ReplaceAccountMediaFilesWithHttpInfo (int? accountId, int? mediaId, string json = null, System.IO.Stream file = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MediaApi->ReplaceAccountMediaFiles");
            // verify the required parameter 'mediaId' is set
            if (mediaId == null)
                throw new ApiException(400, "Missing required parameter 'mediaId' when calling MediaApi->ReplaceAccountMediaFiles");

            var localVarPath = "/accounts/{account_id}/media/files/{media_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (mediaId != null) localVarPathParams.Add("media_id", Configuration.ApiClient.ParameterToString(mediaId)); // path parameter
            if (json != null) localVarFormParams.Add("json", Configuration.ApiClient.ParameterToString(json)); // form parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceAccountMediaFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MediaFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MediaFull) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MediaFull)));
        }

        /// <summary>
        /// Update a media object to your account. Note: The maximum size for media files or JSON objects included with a POST or PUT request is 10 MB. See Account Media for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="mediaId">Media ID</param>
        /// <param name="json">Media extra parameters (optional)</param>
        /// <param name="file">Media file (optional)</param>
        /// <returns>Task of MediaFull</returns>
        public async System.Threading.Tasks.Task<MediaFull> ReplaceAccountMediaFilesAsync (int? accountId, int? mediaId, string json = null, System.IO.Stream file = null)
        {
             ApiResponse<MediaFull> localVarResponse = await ReplaceAccountMediaFilesAsyncWithHttpInfo(accountId, mediaId, json, file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a media object to your account. Note: The maximum size for media files or JSON objects included with a POST or PUT request is 10 MB. See Account Media for more info on the properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="mediaId">Media ID</param>
        /// <param name="json">Media extra parameters (optional)</param>
        /// <param name="file">Media file (optional)</param>
        /// <returns>Task of ApiResponse (MediaFull)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MediaFull>> ReplaceAccountMediaFilesAsyncWithHttpInfo (int? accountId, int? mediaId, string json = null, System.IO.Stream file = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MediaApi->ReplaceAccountMediaFiles");
            // verify the required parameter 'mediaId' is set
            if (mediaId == null)
                throw new ApiException(400, "Missing required parameter 'mediaId' when calling MediaApi->ReplaceAccountMediaFiles");

            var localVarPath = "/accounts/{account_id}/media/files/{media_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (mediaId != null) localVarPathParams.Add("media_id", Configuration.ApiClient.ParameterToString(mediaId)); // path parameter
            if (json != null) localVarFormParams.Add("json", Configuration.ApiClient.ParameterToString(json)); // form parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceAccountMediaFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MediaFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MediaFull) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MediaFull)));
        }

        /// <summary>
        /// Update a media object to your account. Update a media object to your account. Note: The maximum size for media files or JSON objects included with a POST or PUT request is 10 MB. See Account Media for more info on the properties. Note: This API is for users with Account Owner scope access token. Users with Extension User scope token should invoke the Extension level Replace Media API with the following definition: PUT https://api.phone.com/v4/accounts/:account_id/extensions/:extension_id/media/:media_id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="mediaId">Media ID</param>
        /// <param name="data">Media data (optional)</param>
        /// <returns>MediaFull</returns>
        public MediaFull ReplaceAccountMediaTts (int? accountId, int? mediaId, CreateMediaParams data = null)
        {
             ApiResponse<MediaFull> localVarResponse = ReplaceAccountMediaTtsWithHttpInfo(accountId, mediaId, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a media object to your account. Update a media object to your account. Note: The maximum size for media files or JSON objects included with a POST or PUT request is 10 MB. See Account Media for more info on the properties. Note: This API is for users with Account Owner scope access token. Users with Extension User scope token should invoke the Extension level Replace Media API with the following definition: PUT https://api.phone.com/v4/accounts/:account_id/extensions/:extension_id/media/:media_id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="mediaId">Media ID</param>
        /// <param name="data">Media data (optional)</param>
        /// <returns>ApiResponse of MediaFull</returns>
        public ApiResponse< MediaFull > ReplaceAccountMediaTtsWithHttpInfo (int? accountId, int? mediaId, CreateMediaParams data = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MediaApi->ReplaceAccountMediaTts");
            // verify the required parameter 'mediaId' is set
            if (mediaId == null)
                throw new ApiException(400, "Missing required parameter 'mediaId' when calling MediaApi->ReplaceAccountMediaTts");

            var localVarPath = "/accounts/{account_id}/media/tts/{media_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (mediaId != null) localVarPathParams.Add("media_id", Configuration.ApiClient.ParameterToString(mediaId)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceAccountMediaTts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MediaFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MediaFull) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MediaFull)));
        }

        /// <summary>
        /// Update a media object to your account. Update a media object to your account. Note: The maximum size for media files or JSON objects included with a POST or PUT request is 10 MB. See Account Media for more info on the properties. Note: This API is for users with Account Owner scope access token. Users with Extension User scope token should invoke the Extension level Replace Media API with the following definition: PUT https://api.phone.com/v4/accounts/:account_id/extensions/:extension_id/media/:media_id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="mediaId">Media ID</param>
        /// <param name="data">Media data (optional)</param>
        /// <returns>Task of MediaFull</returns>
        public async System.Threading.Tasks.Task<MediaFull> ReplaceAccountMediaTtsAsync (int? accountId, int? mediaId, CreateMediaParams data = null)
        {
             ApiResponse<MediaFull> localVarResponse = await ReplaceAccountMediaTtsAsyncWithHttpInfo(accountId, mediaId, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a media object to your account. Update a media object to your account. Note: The maximum size for media files or JSON objects included with a POST or PUT request is 10 MB. See Account Media for more info on the properties. Note: This API is for users with Account Owner scope access token. Users with Extension User scope token should invoke the Extension level Replace Media API with the following definition: PUT https://api.phone.com/v4/accounts/:account_id/extensions/:extension_id/media/:media_id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="mediaId">Media ID</param>
        /// <param name="data">Media data (optional)</param>
        /// <returns>Task of ApiResponse (MediaFull)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MediaFull>> ReplaceAccountMediaTtsAsyncWithHttpInfo (int? accountId, int? mediaId, CreateMediaParams data = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MediaApi->ReplaceAccountMediaTts");
            // verify the required parameter 'mediaId' is set
            if (mediaId == null)
                throw new ApiException(400, "Missing required parameter 'mediaId' when calling MediaApi->ReplaceAccountMediaTts");

            var localVarPath = "/accounts/{account_id}/media/tts/{media_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (mediaId != null) localVarPathParams.Add("media_id", Configuration.ApiClient.ParameterToString(mediaId)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceAccountMediaTts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MediaFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MediaFull) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MediaFull)));
        }

    }
}
